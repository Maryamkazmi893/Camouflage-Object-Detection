{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12448537,"sourceType":"datasetVersion","datasetId":7852617},{"sourceId":467873,"sourceType":"modelInstanceVersion","modelInstanceId":377457,"modelId":398016},{"sourceId":475095,"sourceType":"modelInstanceVersion","isSourceIdPinned":true,"modelInstanceId":382208,"modelId":401750}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Generating the List file\nBelow code will generate the list of paths. <br>\nTrain/Image/COD10K-CAM-1-Aquatic-1-BatFish-1.jpg Train/Image/COD10K-CAM-1-Aquatic-1-BatFish-1.jpg Train/GT_Object/COD10K-CAM-1-Aquatic-1-BatFish-1.png <br>\nTrain/Image/COD10K-CAM-1-Aquatic-1-BatFish-3.jpg Train/Image/COD10K-CAM-1-Aquatic-1-BatFish-3.jpg Train/GT_Object/COD10K-CAM-1-Aquatic-1-BatFish-3.png <br>\nTrain/Image/COD10K-CAM-1-Aquatic-1-BatFish-7.jpg Train/Image/COD10K-CAM-1-Aquatic-1-BatFish-7.jpg Train/GT_Object/COD10K-CAM-1-Aquatic-1-BatFish-7.png <br>\nTrain/Image/COD10K-CAM-1-Aquatic-1-BatFish-8.jpg Train/Image/COD10K-CAM-1-Aquatic-1-BatFish-8.jpg Train/GT_Object/COD10K-CAM-1-Aquatic-1-BatFish-8.png <br>\nTrain/Image/COD10K-CAM-1-Aquatic-1-BatFish-9.jpg Train/Image/COD10K-CAM-1-Aquatic-1-BatFish-9.jpg Train/GT_Object/COD10K-CAM-1-Aquatic-1-BatFish-9.png","metadata":{}},{"cell_type":"code","source":"import os\n\n# Paths\nbase_dir = '/kaggle/input/traindataset/COD10K-Train/Train'\nimage_dir = os.path.join(base_dir, 'Image')\ngt_dir = os.path.join(base_dir, 'GT_Object')\n\n# Output list file\noutput_lst = '/kaggle/working/cod10k_training.lst'\n\n# Counters\nvalid_count = 0\nmissing_count = 0\n\n# Generate list\nwith open(output_lst, 'w') as f_out:\n    for filename in sorted(os.listdir(image_dir)):\n        if filename.lower().endswith('.jpg'):\n            image_path = os.path.join('Train/Image', filename)\n            depth_path = image_path  # Use RGB image as fake depth\n            gt_filename = filename.replace('.jpg', '.png')\n            gt_path = os.path.join('Train/GT_Object', gt_filename)\n            \n            full_image_path = os.path.join(image_dir, filename)\n            full_gt_path = os.path.join(gt_dir, gt_filename)\n\n            if os.path.exists(full_image_path) and os.path.exists(full_gt_path):\n                f_out.write(f'{image_path} {depth_path} {gt_path}\\n')\n                valid_count += 1\n            else:\n                print(f\"‚ùå Missing: {filename}\")\n                missing_count += 1\n\nprint(f\"‚úÖ Total valid image-mask pairs: {valid_count}\")\nprint(f\"‚õî Total missing files: {missing_count}\")\nprint(f\"üìÑ Saved list file at: {output_lst}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T19:32:02.280845Z","iopub.execute_input":"2025-07-16T19:32:02.281145Z","iopub.status.idle":"2025-07-16T19:32:26.803254Z","shell.execute_reply.started":"2025-07-16T19:32:02.281105Z","shell.execute_reply":"2025-07-16T19:32:26.802622Z"}},"outputs":[{"name":"stdout","text":"‚úÖ Total valid image-mask pairs: 6000\n‚õî Total missing files: 0\nüìÑ Saved list file at: /kaggle/working/cod10k_training.lst\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"Listing the file content to view the format of Data","metadata":{}},{"cell_type":"code","source":"cat /kaggle/working/cod10k_training.lst","metadata":{"trusted":true,"_kg_hide-output":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Fetching the Code files\nNow, we will Fetch the code files from our **Github Repo** for further processing. <br>\nLink of Repo: **https://github.com/Maryamkazmi893/Camouflage-Object-Detection.git**","metadata":{}},{"cell_type":"code","source":"!git clone https://github.com/Maryamkazmi893/Camouflage-Object-Detection.git","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T19:32:33.804483Z","iopub.execute_input":"2025-07-16T19:32:33.804735Z","iopub.status.idle":"2025-07-16T19:32:34.724968Z","shell.execute_reply.started":"2025-07-16T19:32:33.804715Z","shell.execute_reply":"2025-07-16T19:32:34.724246Z"}},"outputs":[{"name":"stdout","text":"Cloning into 'Camouflage-Object-Detection'...\nremote: Enumerating objects: 50, done.\u001b[K\nremote: Counting objects: 100% (50/50), done.\u001b[K\nremote: Compressing objects: 100% (47/47), done.\u001b[K\nremote: Total 50 (delta 20), reused 0 (delta 0), pack-reused 0 (from 0)\u001b[K\nReceiving objects: 100% (50/50), 62.49 KiB | 3.68 MiB/s, done.\nResolving deltas: 100% (20/20), done.\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"%%writefile /kaggle/working/Camouflage-Object-Detection/cvit-main-2/solver.py\nimport torch\nfrom torch.nn import functional as F\nfrom conformer import build_model\nimport numpy as np\nimport os\nimport cv2\nimport time\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torchvision.utils import make_grid\nwriter = SummaryWriter('log/run' + time.strftime(\"%d-%m\"))\nimport torch.nn as nn\nimport argparse\nimport os.path as osp\nimport os\nsize_coarse = (10, 10)\nimport torch\nimport torch.nn as nn\nimport torchvision\nfrom torchvision import models, transforms, utils\nfrom torch.autograd import Variable\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.misc\nfrom  utils import  count_model_flops,count_model_params\nfrom PIL import Image\nimport json\n\nclass Solver(object):\n    def __init__(self, train_loader, test_loader, config):\n        self.train_loader = train_loader\n        self.test_loader = test_loader\n        self.config = config\n        self.iter_size = config.iter_size\n        self.show_every = config.show_every\n\n        # Build RGB-only COD Model\n        self.net = build_model(self.config.network, self.config.arch)\n\n        if config.mode == 'test':\n            print('Loading pre-trained model for testing from %s...' % self.config.model)\n            self.net.load_state_dict(torch.load(self.config.model, map_location=torch.device('cpu')))\n        elif config.mode == 'train':\n            if self.config.load == '':\n                print(\"Loading pre-trained ImageNet weights\")\n                self.net.load_state_dict(torch.load(self.config.pretrained_model), strict=False)\n            else:\n                print('Resuming training from checkpoint')\n                self.net.load_state_dict(torch.load(self.config.load), strict=False)\n\n\n\n        if self.config.cuda:\n            self.net = self.net.cuda()\n\n        self.optimizer = torch.optim.Adam(self.net.parameters(), lr=self.config.lr, weight_decay=self.config.wd)\n        self.print_network(self.net, 'Conformer-based RGB COD Model')\n\n\n    #print the network information and parameter numbers\n    def print_network(self, model, name):\n        num_params_t = 0\n        num_params=0\n        for p in model.parameters():\n            if p.requires_grad:\n                num_params_t += p.numel()\n            else:\n                num_params += p.numel()\n        print(name)\n        #print(model)\n        print(\"The number of trainable parameters: {}\".format(num_params_t))\n        print(\"The number of parameters: {}\".format(num_params))\n        print(f'Flops: {count_model_flops(model)}')\n        print(f'Flops: {count_model_params(model)}')\n\n    def test(self):\n        print('Testing RGB COD...')\n        self.net.eval()\n        for i, data_batch in enumerate(self.test_loader):\n            images, name, im_size = data_batch['image'], data_batch['name'][0], np.asarray(data_batch['size'])\n\n            with torch.no_grad():\n                if self.config.cuda:\n                    images = images.cuda()\n\n                preds = self.net(images)  # RGB-only\n\n                preds = F.interpolate(preds, size=tuple(im_size), mode='bilinear', align_corners=True)\n                pred = torch.sigmoid(preds)\n                pred = np.squeeze(pred.cpu().data.numpy())\n\n                pred = (pred - pred.min()) / (pred.max() - pred.min() + 1e-8)\n                pred = (pred * 255).astype(np.uint8)\n\n                save_path = os.path.join(self.config.test_folder, name[:-4] + '_COD.png')\n                cv2.imwrite(save_path, pred)\n\n        print('COD Testing Completed!')\n\n    def train(self):\n        iter_num = len(self.train_loader.dataset) // self.config.batch_size\n\n        for epoch in range(self.config.epoch):\n            total_loss = 0.0\n            self.net.train()\n\n            for i, data_batch in enumerate(self.train_loader):\n                images = data_batch['sal_image']\n                labels = data_batch['sal_label']\n\n                if self.config.cuda:\n                    images, labels = images.cuda(), labels.cuda()\n\n                self.optimizer.zero_grad()\n\n                preds = self.net(images,images)  # RGB-only\n                #print(preds.shape())\n                #preds = F.interpolate(preds, size=labels.size()[2:], mode='bilinear', align_corners=True)\n\n                loss = F.binary_cross_entropy_with_logits(preds, labels)\n                loss.backward()\n                self.optimizer.step()\n\n                total_loss += loss.item()\n\n                if (i + 1) % (self.show_every // self.config.batch_size) == 0:\n                    avg_loss = total_loss / (i + 1)\n                    print(f\"Epoch [{epoch+1}/{self.config.epoch}], Iter [{i+1}/{iter_num}], Loss: {avg_loss:.4f}\")\n\n            torch.save(self.net.state_dict(), f\"{self.config.save_folder}/epoch_{epoch+1}.pth\")\n\n        torch.save(self.net.state_dict(), f\"{self.config.save_folder}/final_COD_model.pth\")\n\n\n\n# class Solver(object):\n#     def __init__(self, train_loader, test_loader, config):\n#         self.train_loader = train_loader\n#         self.test_loader = test_loader\n#         self.config = config\n#         self.iter_size = config.iter_size\n#         self.show_every = config.show_every\n#         #self.build_model()\n#         self.net = build_model(self.config.network, self.config.arch)\n#         #self.net.eval()\n#         if config.mode == 'test':\n#             print('Loading pre-trained model for testing from %s...' % self.config.model)\n#             self.net.load_state_dict(torch.load(self.config.model, map_location=torch.device('cpu')))\n#         if config.mode == 'train':\n#             if self.config.load == '':\n#                 print(\"Loading pre-trained imagenet weights for fine tuning\")\n#                 self.net.JLModule.load_pretrained_model(self.config.pretrained_model\n#                                                         if isinstance(self.config.pretrained_model, str)\n#                                                         else self.config.pretrained_model[self.config.network])\n#                 # load pretrained backbone\n#             else:\n#                 print('Loading pretrained model to resume training')\n#                 self.net.load_state_dict(torch.load(self.config.load))  # load pretrained model\n        \n#         if self.config.cuda:\n#             self.net = self.net.cuda()\n\n#         self.lr = self.config.lr\n#         self.wd = self.config.wd\n\n#         self.optimizer = torch.optim.Adam(self.net.parameters(), lr=self.lr, weight_decay=self.wd)\n\n#         self.print_network(self.net, 'Conformer based SOD Structure')\n\n#     # print the network information and parameter numbers\n#     def print_network(self, model, name):\n#         num_params_t = 0\n#         num_params=0\n#         for p in model.parameters():\n#             if p.requires_grad:\n#                 num_params_t += p.numel()\n#             else:\n#                 num_params += p.numel()\n#         print(name)\n#         #print(model)\n#         print(\"The number of trainable parameters: {}\".format(num_params_t))\n#         print(\"The number of parameters: {}\".format(num_params))\n#         print(f'Flops: {count_model_flops(model)}')\n#         print(f'Flops: {count_model_params(model)}')\n\n#     # build the network\n#     '''def build_model(self):\n#         self.net = build_model(self.config.network, self.config.arch)\n\n#         if self.config.cuda:\n#             self.net = self.net.cuda()\n\n#         self.lr = self.config.lr\n#         self.wd = self.config.wd\n\n#         self.optimizer = torch.optim.Adam(self.net.parameters(), lr=self.lr, weight_decay=self.wd)\n\n#         self.print_network(self.net, 'JL-DCF Structure')'''\n\n#     def test(self):\n#         print('Testing...')\n#         time_s = time.time()\n#         img_num = len(self.test_loader)\n#         for i, data_batch in enumerate(self.test_loader):\n#             images, name, im_size, depth = data_batch['image'], data_batch['name'][0], np.asarray(data_batch['size']), \\\n#                                            data_batch['depth']\n#             with torch.no_grad():\n#                 if self.config.cuda:\n#                     device = torch.device(self.config.device_id)\n#                     images = images.to(device)\n#                     depth = depth.to(device)\n\n#                 #input = torch.cat((images, depth), dim=0)\n#                 preds,sal_low,sal_med,sal_high,coarse_sal_rgb,coarse_sal_depth,Att,e_rgbd0,e_rgbd1,e_rgbd2,rgb_1,rgb_2,rgb_3,rgb_4,rgb_5,depth_1,depth_2,depth_3,depth_4,depth_5,rgbd_fusion_1,rgbd_fusion_2,rgbd_fusion_3,rgbd_fusion_4,rgbd_fusion_5= self.net(images,depth)\n#                 #print(depth_1.shape[1])\n#                 rgb_1_a=((torch.sum(rgb_1,1)**2)/rgb_1.shape[1]).unsqueeze(0)\n#                 #print(depth_1.shape)\n#                 rgb_2_a=(torch.sum(rgb_2,1)/rgb_2.shape[1]).unsqueeze(0)\n#                 rgb_3_a=(torch.sum(rgb_3,1)/rgb_3.shape[1]).unsqueeze(0)\n#                 rgb_4_a=(torch.sum(rgb_4,1)/rgb_4.shape[1]).unsqueeze(0)\n#                 rgb_5_a=(torch.sum(rgb_5,1)/rgb_5.shape[1]).unsqueeze(0)\n#                 depth_1_a=((torch.sum(depth_1,1)**2)/depth_1.shape[1]).unsqueeze(0)\n#                 depth_2_a=((torch.sum(depth_2,1)**2)/depth_2.shape[1]).unsqueeze(0)\n#                 depth_3_a=(torch.sum(depth_3,1)/depth_3.shape[1]).unsqueeze(0)\n#                 depth_4_a=(torch.sum(depth_4,1)/depth_4.shape[1]).unsqueeze(0)\n#                 depth_5_a=(torch.sum(depth_5,1)/depth_5.shape[1]).unsqueeze(0)\n#                 rgbd_fusion_1_a=(torch.sum(rgbd_fusion_1,1)/rgbd_fusion_1.shape[1]).unsqueeze(0)\n#                 rgbd_fusion_2_a=(torch.sum(rgbd_fusion_2,1)/rgbd_fusion_2.shape[1]).unsqueeze(0)\n#                 rgbd_fusion_3_a=(torch.sum(rgbd_fusion_3,1)/rgbd_fusion_3.shape[1]).unsqueeze(0)\n#                 rgbd_fusion_4_a=(torch.sum(rgbd_fusion_4,1)/rgbd_fusion_4.shape[1]).unsqueeze(0)\n#                 rgbd_fusion_5_a=(torch.sum(rgbd_fusion_5,1)/rgbd_fusion_5.shape[1]).unsqueeze(0)\n#                 rgb_1_a = F.interpolate(rgb_1_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgb_1_a = np.squeeze(torch.sigmoid(rgb_1_a)).cpu().data.numpy()\n#                 rgb_1_a = (rgb_1_a- rgb_1_a.min()) / (rgb_1_a.max() - rgb_1_a.min() + 1e-8)\n#                 multi_fuse_rgb_1_a = 255 * rgb_1_a\n#                 #multi_fuse_rgb_1_a=cv2.applyColorMap((multi_fuse_rgb_1_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgb_1_a = os.path.join(self.config.test_folder, name[:-4] + '_rgb_1_a.png')\n#                 cv2.imwrite(filename_rgb_1_a, multi_fuse_rgb_1_a)\n\n#                 rgb_2_a = F.interpolate(rgb_2_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgb_2_a = np.squeeze(torch.sigmoid(rgb_2_a)).cpu().data.numpy()\n#                 rgb_2_a = (rgb_2_a- rgb_2_a.min()) / (rgb_2_a.max() - rgb_2_a.min() + 1e-8)\n#                 multi_fuse_rgb_2_a = 255 * rgb_2_a\n#                 #multi_fuse_rgb_2_a=cv2.applyColorMap((multi_fuse_rgb_2_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgb_2_a = os.path.join(self.config.test_folder, name[:-4] + '_rgb_2_a.png')\n#                 cv2.imwrite(filename_rgb_2_a, multi_fuse_rgb_2_a)\n\n#                 rgb_3_a = F.interpolate(rgb_3_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgb_3_a = np.squeeze(torch.sigmoid(rgb_3_a)).cpu().data.numpy()\n#                 rgb_3_a = (rgb_3_a- rgb_3_a.min()) / (rgb_3_a.max() - rgb_3_a.min() + 1e-8)\n#                 multi_fuse_rgb_3_a = 255 * rgb_3_a\n#                 #multi_fuse_rgb_3_a=cv2.applyColorMap((multi_fuse_rgb_3_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgb_3_a = os.path.join(self.config.test_folder, name[:-4] + '_rgb_3_a.png')\n#                 cv2.imwrite(filename_rgb_3_a, multi_fuse_rgb_3_a)\n\n#                 rgb_4_a = F.interpolate(rgb_4_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgb_4_a = np.squeeze(torch.sigmoid(rgb_4_a)).cpu().data.numpy()\n#                 rgb_4_a = (rgb_4_a- rgb_4_a.min()) / (rgb_4_a.max() - rgb_4_a.min() + 1e-8)\n#                 multi_fuse_rgb_4_a = 255 * rgb_4_a\n#                 #multi_fuse_rgb_4_a=cv2.applyColorMap((multi_fuse_rgb_4_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgb_4_a = os.path.join(self.config.test_folder, name[:-4] + '_rgb_4_a.png')\n#                 cv2.imwrite(filename_rgb_4_a, multi_fuse_rgb_4_a)\n\n#                 rgb_5_a = F.interpolate(rgb_5_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgb_5_a = np.squeeze(torch.sigmoid(rgb_5_a)).cpu().data.numpy()\n#                 rgb_5_a = (rgb_5_a- rgb_5_a.min()) / (rgb_5_a.max() - rgb_5_a.min() + 1e-8)\n#                 multi_fuse_rgb_5_a = 255 * rgb_5_a\n#                 #multi_fuse_rgb_5_a=cv2.applyColorMap((multi_fuse_rgb_5_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgb_5_a = os.path.join(self.config.test_folder, name[:-4] + '_rgb_5_a.png')\n#                 cv2.imwrite(filename_rgb_5_a, multi_fuse_rgb_5_a)\n\n#                 depth_1_a = F.interpolate(depth_1_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 depth_1_a = np.squeeze(torch.sigmoid(depth_1_a)).cpu().data.numpy()\n#                 depth_1_a = (depth_1_a- depth_1_a.min()) / (depth_1_a.max() - depth_1_a.min() + 1e-8)\n#                 multi_fuse_depth_1_a = 255 * depth_1_a\n#                 #multi_fuse_depth_1_a=cv2.applyColorMap((multi_fuse_depth_1_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_depth_1_a = os.path.join(self.config.test_folder, name[:-4] + '_depth_1_a.png')\n#                 cv2.imwrite(filename_depth_1_a, multi_fuse_depth_1_a)\n\n#                 depth_2_a = F.interpolate(depth_2_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 depth_2_a = np.squeeze(torch.sigmoid(depth_2_a)).cpu().data.numpy()\n#                 depth_2_a = (depth_2_a- depth_2_a.min()) / (depth_2_a.max() - depth_2_a.min() + 1e-8)\n#                 multi_fuse_depth_2_a = 255 * depth_2_a\n#                 #multi_fuse_depth_2_a=cv2.applyColorMap((multi_fuse_depth_2_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_depth_2_a = os.path.join(self.config.test_folder, name[:-4] + '_depth_2_a.png')\n#                 cv2.imwrite(filename_depth_2_a, multi_fuse_depth_2_a)\n\n#                 depth_3_a = F.interpolate(depth_3_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 depth_3_a = np.squeeze(torch.sigmoid(depth_3_a)).cpu().data.numpy()\n#                 depth_3_a = (depth_3_a- depth_3_a.min()) / (depth_3_a.max() - depth_3_a.min() + 1e-8)\n#                 multi_fuse_depth_3_a = 255 * depth_3_a\n#                 #multi_fuse_depth_3_a=cv2.applyColorMap((multi_fuse_depth_3_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_depth_3_a = os.path.join(self.config.test_folder, name[:-4] + '_depth_3_a.png')\n#                 cv2.imwrite(filename_depth_3_a, multi_fuse_depth_3_a)\n\n#                 depth_4_a = F.interpolate(depth_4_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 depth_4_a = np.squeeze(torch.sigmoid(depth_4_a)).cpu().data.numpy()\n#                 depth_4_a = (depth_4_a- depth_4_a.min()) / (depth_4_a.max() - depth_4_a.min() + 1e-8)\n#                 multi_fuse_depth_4_a = 255 * depth_4_a\n#                 #multi_fuse_depth_4_a=cv2.applyColorMap((multi_fuse_depth_4_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_depth_4_a = os.path.join(self.config.test_folder, name[:-4] + '_depth_4_a.png')\n#                 cv2.imwrite(filename_depth_4_a, multi_fuse_depth_4_a)\n\n#                 depth_5_a = F.interpolate(depth_5_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 depth_5_a = np.squeeze(torch.sigmoid(depth_5_a)).cpu().data.numpy()\n#                 depth_5_a = (depth_5_a- depth_5_a.min()) / (depth_5_a.max() - depth_5_a.min() + 1e-8)\n#                 multi_fuse_depth_5_a = 255 * depth_5_a\n#                 #multi_fuse_depth_5_a=cv2.applyColorMap((multi_fuse_depth_5_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_depth_5_a = os.path.join(self.config.test_folder, name[:-4] + '_depth_5_a.png')\n#                 cv2.imwrite(filename_depth_5_a, multi_fuse_depth_5_a)\n\n#                 rgbd_fusion_1_a = F.interpolate(rgbd_fusion_1_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgbd_fusion_1_a = np.squeeze(torch.sigmoid(rgbd_fusion_1_a)).cpu().data.numpy()\n#                 rgbd_fusion_1_a= (rgbd_fusion_1_a- rgbd_fusion_1_a.min()) / (rgbd_fusion_1_a.max() - rgbd_fusion_1_a.min() + 1e-8)\n#                 multi_fuse_rgbd_fusion_1_a = 255 * rgbd_fusion_1_a\n#                 #multi_fuse_rgbd_fusion_1_a=cv2.applyColorMap((multi_fuse_rgbd_fusion_1_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgbd_fusion_1_a = os.path.join(self.config.test_folder, name[:-4] + '_rgbd_fusion_1_a.png')\n#                 cv2.imwrite(filename_rgbd_fusion_1_a, multi_fuse_rgbd_fusion_1_a)\n\n#                 rgbd_fusion_2_a = F.interpolate(rgbd_fusion_2_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgbd_fusion_2_a = np.squeeze(torch.sigmoid(rgbd_fusion_2_a)).cpu().data.numpy()\n#                 rgbd_fusion_2_a= (rgbd_fusion_2_a- rgbd_fusion_2_a.min()) / (rgbd_fusion_2_a.max() - rgbd_fusion_2_a.min() + 1e-8)\n#                 multi_fuse_rgbd_fusion_2_a = 255 * rgbd_fusion_2_a\n#                 #multi_fuse_rgbd_fusion_2_a=cv2.applyColorMap((multi_fuse_rgbd_fusion_2_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgbd_fusion_2_a = os.path.join(self.config.test_folder, name[:-4] + '_rgbd_fusion_2_a.png')\n#                 cv2.imwrite(filename_rgbd_fusion_2_a, multi_fuse_rgbd_fusion_2_a)\n\n#                 rgbd_fusion_3_a = F.interpolate(rgbd_fusion_3_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgbd_fusion_3_a = np.squeeze(torch.sigmoid(rgbd_fusion_3_a)).cpu().data.numpy()\n#                 rgbd_fusion_3_a= (rgbd_fusion_3_a- rgbd_fusion_3_a.min()) / (rgbd_fusion_3_a.max() - rgbd_fusion_3_a.min() + 1e-8)\n#                 multi_fuse_rgbd_fusion_3_a = 255 * rgbd_fusion_3_a\n#                 #multi_fuse_rgbd_fusion_3_a=cv2.applyColorMap((multi_fuse_rgbd_fusion_3_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgbd_fusion_3_a = os.path.join(self.config.test_folder, name[:-4] + '_rgbd_fusion_3_a.png')\n#                 cv2.imwrite(filename_rgbd_fusion_3_a, multi_fuse_rgbd_fusion_3_a)\n\n#                 rgbd_fusion_4_a = F.interpolate(rgbd_fusion_4_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgbd_fusion_4_a = np.squeeze(torch.sigmoid(rgbd_fusion_4_a)).cpu().data.numpy()\n#                 rgbd_fusion_4_a= (rgbd_fusion_4_a- rgbd_fusion_4_a.min()) / (rgbd_fusion_4_a.max() - rgbd_fusion_4_a.min() + 1e-8)\n#                 multi_fuse_rgbd_fusion_4_a = 255 * rgbd_fusion_4_a\n#                 #multi_fuse_rgbd_fusion_4_a=cv2.applyColorMap((multi_fuse_rgbd_fusion_4_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgbd_fusion_4_a = os.path.join(self.config.test_folder, name[:-4] + '_rgbd_fusion_4_a.png')\n#                 cv2.imwrite(filename_rgbd_fusion_4_a, multi_fuse_rgbd_fusion_4_a)\n\n#                 rgbd_fusion_5_a = F.interpolate(rgbd_fusion_5_a, tuple(im_size), mode='bilinear', align_corners=True)\n#                 rgbd_fusion_5_a = np.squeeze(torch.sigmoid(rgbd_fusion_5_a)).cpu().data.numpy()\n#                 rgbd_fusion_5_a= (rgbd_fusion_5_a- rgbd_fusion_5_a.min()) / (rgbd_fusion_5_a.max() - rgbd_fusion_5_a.min() + 1e-8)\n#                 multi_fuse_rgbd_fusion_5_a = 255 * rgbd_fusion_5_a\n#                 #multi_fuse_rgbd_fusion_5_a=cv2.applyColorMap((multi_fuse_rgbd_fusion_5_a).astype(np.uint8), cv2.COLORMAP_RAINBOW)\n#                 filename_rgbd_fusion_5_a = os.path.join(self.config.test_folder, name[:-4] + '_rgbd_fusion_5_a.png')\n#                 cv2.imwrite(filename_rgbd_fusion_5_a, multi_fuse_rgbd_fusion_5_a)\n#                 #print(rgb_1_a.shape)\n#                 '''model_weights =[]\n#                 conv_layers = []# get all the model children as list\n#                 model_children = list(self.net.modules())#counter to keep count of the conv layers\n#                 counter = 0#append all the conv layers and their respective wights to the list\n#                 for i in range(len(model_children)):\n#                     print('name of model childgren',model_children[i])\n#                     if type(model_children[i]) == nn.Conv2d:\n#                         counter+=1\n#                         model_weights.append(model_children[i].weight)\n#                         conv_layers.append(model_children[i])\n#                     elif type(model_children[i]) == nn.Sequential:\n#                         for j in range(len(model_children[i])):\n#                             for child in model_children[i][j].children():\n#                                 if type(child) == nn.Conv2d:\n#                                     counter+=1\n#                                     model_weights.append(child.weight)\n#                                     conv_layers.append(child)\n#                 print(f\"Total sequential layers: {counter}\")\n#                 print(conv_layers)\n\n\n#                 outputs = []\n#                 names = []\n#                 for layer in conv_layers[0:]:\n#                     image = layer(images)\n#                     outputs.append(image)\n#                     names.append(str(layer))\n#                 print(len(outputs))#print feature_maps\n#                 for feature_map in outputs:\n#                     print(feature_map.shape)'''\n\n#                 #print(e_rgbd01.shape)\n#                 preds = F.interpolate(preds, tuple(im_size), mode='bilinear', align_corners=True)\n#                 pred = np.squeeze(torch.sigmoid(preds)).cpu().data.numpy()\n#                 #print(pred.shape)\n#                 pred = (pred - pred.min()) / (pred.max() - pred.min() + 1e-8)\n#                 multi_fuse = 255 * pred\n#                 filename = os.path.join(self.config.test_folder, name[:-4] + '_convtran.png')\n#                 cv2.imwrite(filename, multi_fuse)\n#                 '''coarse_sal_rgb= F.interpolate(coarse_sal_rgb, tuple(im_size), mode='bilinear', align_corners=True)\n#                 coarse_sal_rgbs = np.squeeze(torch.sigmoid(coarse_sal_rgb)).cpu().data.numpy()\n#                 #print(pred.shape)\n#                 coarse_sal_rgbs = (coarse_sal_rgbs - coarse_sal_rgbs.min()) / (coarse_sal_rgbs.max() - coarse_sal_rgbs.min() + 1e-8)\n#                 multi_fuse_coarse_sal_rgb = 255 * coarse_sal_rgbs\n#                 filename_r = os.path.join(self.config.test_folder, name[:-4] + '_coarse_sal_rgb.png')\n#                 cv2.imwrite(filename_r, multi_fuse_coarse_sal_rgb)\n#                 coarse_sal_depth= F.interpolate(coarse_sal_depth, tuple(im_size), mode='bilinear', align_corners=True)\n#                 coarse_sal_ds = np.squeeze(torch.sigmoid(coarse_sal_depth)).cpu().data.numpy()\n#                 #print(pred.shape)\n#                 coarse_sal_ds = (coarse_sal_ds - coarse_sal_ds.min()) / (coarse_sal_ds.max() - coarse_sal_ds.min() + 1e-8)\n#                 multi_fuse_coarse_sal_ds = 255 * coarse_sal_ds\n#                 filename_d = os.path.join(self.config.test_folder, name[:-4] + '_coarse_sal_d.png')\n#                 cv2.imwrite(filename_d, multi_fuse_coarse_sal_ds)\n#                 e_rgbd2= F.interpolate(e_rgbd2, tuple(im_size), mode='bilinear', align_corners=True)\n#                 e_rgbd2 = np.squeeze(torch.sigmoid(e_rgbd2)).cpu().data.numpy()\n#                 #print(pred.shape)\n#                 e_rgbd2 = (e_rgbd2 - e_rgbd2.min()) / (e_rgbd2.max() - e_rgbd2.min() + 1e-8)\n#                 multi_fuse_e_rgbd2 = 255 * e_rgbd2\n#                 filename_re = os.path.join(self.config.test_folder, name[:-4] + '_edge2.png')\n#                 cv2.imwrite(filename_re, multi_fuse_e_rgbd2)'''\n\n               \n#                 '''#e_rgbd01 = F.interpolate(e_rgbd01, tuple(im_size), mode='bilinear', align_corners=True)\n#                 e_rgbd01 = np.squeeze(torch.sigmoid(Att[10])).cpu().data.numpy()\n#                 print(e_rgbd01.shape)\n#                 #e_rgbd01 = (e_rgbd01-e_rgbd01.min()) / (e_rgbd01.max() - e_rgbd01.min() + 1e-8)\n#                 #e_rgbd01 = 255 * e_rgbd01\n#                 filename = os.path.join(self.config.test_folder, name[:-4] + '_edge.png')\n#                 a=cv2.imwrite(filename, e_rgbd01)\n#                 print(a)\n#                 #e_rgbd11 = F.interpolate(e_rgbd11, tuple(im_size), mode='bilinear', align_corners=True)\n#                 e_rgbd11 = np.squeeze(torch.sigmoid(Att[11])).cpu().data.numpy()\n#                 print(e_rgbd11.shape)\n#                 e_rgbd11 = (e_rgbd11-e_rgbd11.min()) / (e_rgbd11.max() - e_rgbd11.min() + 1e-8)\n#                 e_rgbd11 = 255 * e_rgbd11\n#                 filename = os.path.join(self.config.test_folder, name[:-5] + '_edge.png')\n#                 cv2.imwrite(filename, e_rgbd11)\n\n#                 #e_rgbd21 = F.interpolate(e_rgbd21, tuple(im_size), mode='bilinear', align_corners=True)\n#                 e_rgbd21 = np.squeeze(torch.sigmoid(Att[9])).cpu().data.numpy()\n\n#                 e_rgbd21 = (e_rgbd21-e_rgbd21.min()) / (e_rgbd21.max() - e_rgbd21.min() + 1e-8)\n#                 e_rgbd21 = 255 * e_rgbd21\n#                 filename = os.path.join(self.config.test_folder, name[:-6] + '_edge.png')\n#                 cv2.imwrite(filename, e_rgbd21)'''\n#         time_e = time.time()\n#         print('Speed: %f FPS' % (img_num / (time_e - time_s)))\n#         print('Test Done!')\n    \n  \n#     # training phase\n#     def train(self):\n#         iter_num = len(self.train_loader.dataset) // self.config.batch_size\n        \n#         loss_vals=  []\n        \n#         for epoch in range(self.config.epoch):\n#             r_sal_loss = 0\n#             r_sal_loss_item=0\n#             for i, data_batch in enumerate(self.train_loader):\n#                 sal_image, sal_depth, sal_label, sal_edge = data_batch['sal_image'], data_batch['sal_depth'], data_batch[\n#                     'sal_label'], data_batch['sal_edge']\n#                 if (sal_image.size(2) != sal_label.size(2)) or (sal_image.size(3) != sal_label.size(3)):\n#                     print('IMAGE ERROR, PASSING```')\n#                     continue\n#                 if self.config.cuda:\n#                     device = torch.device(self.config.device_id)\n#                     sal_image, sal_depth, sal_label, sal_edge= sal_image.to(device), sal_depth.to(device), sal_label.to(device),sal_edge.to(device)\n\n               \n#                 self.optimizer.zero_grad()\n#                 sal_label_coarse = F.interpolate(sal_label, size_coarse, mode='bilinear', align_corners=True)\n                \n#                 sal_final,sal_low,sal_med,sal_high,coarse_sal_rgb,coarse_sal_depth,Att,sal_edge_rgbd0,sal_edge_rgbd1,sal_edge_rgbd2 = self.net(sal_image,sal_depth)\n                \n#                 sal_loss_coarse_rgb =  F.binary_cross_entropy_with_logits(coarse_sal_rgb, sal_label_coarse, reduction='sum')\n#                 sal_loss_coarse_depth =  F.binary_cross_entropy_with_logits(coarse_sal_depth, sal_label_coarse, reduction='sum')\n#                 sal_final_loss =  F.binary_cross_entropy_with_logits(sal_final, sal_label, reduction='sum')\n#                 edge_loss_rgbd0=F.smooth_l1_loss(sal_edge_rgbd0,sal_edge)\n#                 edge_loss_rgbd1=F.smooth_l1_loss(sal_edge_rgbd1,sal_edge)\n#                 edge_loss_rgbd2=F.smooth_l1_loss(sal_edge_rgbd2,sal_edge)\n                \n#                 sal_loss_fuse = sal_final_loss+512*edge_loss_rgbd0+1024*edge_loss_rgbd1+2048*edge_loss_rgbd2+sal_loss_coarse_rgb+sal_loss_coarse_depth\n#                 sal_loss = sal_loss_fuse/ (self.iter_size * self.config.batch_size)\n#                 r_sal_loss += sal_loss.data\n#                 r_sal_loss_item+=sal_loss.item() * sal_image.size(0)\n#                 sal_loss.backward()\n#                 self.optimizer.step()\n\n#                 if (i + 1) % (self.show_every // self.config.batch_size) == 0:\n#                     print('epoch: [%2d/%2d], iter: [%5d/%5d]  ||  Sal : %0.4f  ||sal_final:%0.4f|| edge_loss0:%0.4f|| edge_loss1:%0.4f|| edge_loss2:%0.4f|| r:%0.4f||d:%0.4f' % (\n#                         epoch, self.config.epoch, i + 1, iter_num, r_sal_loss,sal_final_loss,edge_loss_rgbd0,edge_loss_rgbd1,edge_loss_rgbd2,sal_loss_coarse_rgb,sal_loss_coarse_depth ))\n#                     # print('Learning rate: ' + str(self.lr))\n#                     writer.add_scalar('training loss', r_sal_loss / (self.show_every / self.iter_size),\n#                                       epoch * len(self.train_loader.dataset) + i)\n#                     writer.add_scalar('sal_loss_coarse_rgb training loss', sal_loss_coarse_rgb.data,\n#                                       epoch * len(self.train_loader.dataset) + i)\n#                     writer.add_scalar('sal_loss_coarse_depth training loss', sal_loss_coarse_depth.data,\n#                                       epoch * len(self.train_loader.dataset) + i)\n#                     writer.add_scalar('sal_edge training loss', edge_loss_rgbd2.data,\n#                                       epoch * len(self.train_loader.dataset) + i)\n\n#                     r_sal_loss = 0\n#                     res = coarse_sal_depth[0].clone()\n#                     res = res.sigmoid().data.cpu().numpy().squeeze()\n#                     res = (res - res.min()) / (res.max() - res.min() + 1e-8)\n#                     writer.add_image('coarse_sal_depth', torch.tensor(res), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label_coarse[0].clone().cpu().data, 1, normalize=True)\n\n#                     res = coarse_sal_rgb[0].clone()\n#                     res = res.sigmoid().data.cpu().numpy().squeeze()\n#                     res = (res - res.min()) / (res.max() - res.min() + 1e-8)\n#                     writer.add_image('coarse_sal_rgb', torch.tensor(res), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label_coarse[0].clone().cpu().data, 1, normalize=True)\n                    \n#                     fsal = sal_final[0].clone()\n#                     fsal = fsal.sigmoid().data.cpu().numpy().squeeze()\n#                     fsal = (fsal - fsal.min()) / (fsal.max() - fsal.min() + 1e-8)\n#                     writer.add_image('sal_final', torch.tensor(fsal), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label[0].clone().cpu().data, 1, normalize=True)\n\n#                     fsal = sal_low[0].clone()\n#                     fsal = fsal.sigmoid().data.cpu().numpy().squeeze()\n#                     fsal = (fsal - fsal.min()) / (fsal.max() - fsal.min() + 1e-8)\n#                     writer.add_image('sal_low', torch.tensor(fsal), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label[0].clone().cpu().data, 1, normalize=True)\n#                     fsal = sal_high[0].clone()\n#                     fsal = fsal.sigmoid().data.cpu().numpy().squeeze()\n#                     fsal = (fsal - fsal.min()) / (fsal.max() - fsal.min() + 1e-8)\n#                     writer.add_image('sal_high', torch.tensor(fsal), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label[0].clone().cpu().data, 1, normalize=True)\n#                     fsal = sal_med[0].clone()\n#                     fsal = fsal.sigmoid().data.cpu().numpy().squeeze()\n#                     fsal = (fsal - fsal.min()) / (fsal.max() - fsal.min() + 1e-8)\n#                     writer.add_image('sal_med', torch.tensor(fsal), i, dataformats='HW')\n#                     grid_image = make_grid(sal_label[0].clone().cpu().data, 1, normalize=True)\n#                     sal_edge_rgbd = sal_edge_rgbd2[0].clone()\n#                     sal_edge_rgbd = sal_edge_rgbd.sigmoid().data.cpu().numpy().squeeze()\n#                     sal_edge_rgbd = (sal_edge_rgbd - sal_edge_rgbd.min()) / (sal_edge_rgbd.max() - sal_edge_rgbd.min() + 1e-8)\n#                     writer.add_image('sal_edge_rgbd', torch.tensor(sal_edge_rgbd), i, dataformats='HW')\n#                     grid_image = make_grid(sal_edge[0].clone().cpu().data, 1, normalize=True)\n\n\n#             if (epoch + 1) % self.config.epoch_save == 0:\n#                 torch.save(self.net.state_dict(), '%s/epoch_%d.pth' % (self.config.save_folder, epoch + 1))\n#             train_loss=r_sal_loss_item/len(self.train_loader.dataset)\n#             loss_vals.append(train_loss)\n            \n#             print('Epoch:[%2d/%2d] | Train Loss : %.3f' % (epoch, self.config.epoch,train_loss))\n            \n#         # save model\n#         torch.save(self.net.state_dict(), '%s/final.pth' % self.config.save_folder)\n        \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T19:32:42.949412Z","iopub.execute_input":"2025-07-16T19:32:42.949699Z","iopub.status.idle":"2025-07-16T19:32:42.968459Z","shell.execute_reply.started":"2025-07-16T19:32:42.949673Z","shell.execute_reply":"2025-07-16T19:32:42.967545Z"}},"outputs":[{"name":"stdout","text":"Overwriting /kaggle/working/Camouflage-Object-Detection/cvit-main-2/solver.py\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"%%writefile /kaggle/working/Camouflage-Object-Detection/cvit-main-2/conformer.py\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom functools import partial\nfrom torchsummary import summary\nfrom timm.models.layers import DropPath, trunc_normal_\nimport os\nimport cv2\nimport numpy\nimport numpy as np\nimport time\nfrom torch.utils.tensorboard import SummaryWriter\nfrom torchvision.utils import make_grid\nwriter = SummaryWriter('log/run' + time.strftime(\"%d-%m\"))\nim_size=(320,320)\nclass Mlp(nn.Module):\n    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):\n        super().__init__()\n        out_features = out_features or in_features\n        hidden_features = hidden_features or in_features\n        self.fc1 = nn.Linear(in_features, hidden_features)\n        self.act = act_layer()\n        self.fc2 = nn.Linear(hidden_features, out_features)\n        self.drop = nn.Dropout(drop)\n\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.act(x)\n        x = self.drop(x)\n        x = self.fc2(x)\n        x = self.drop(x)\n        return x\n\n\nclass Attention(nn.Module):\n    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):\n        super().__init__()\n        self.num_heads = num_heads\n        head_dim = dim // num_heads\n        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights\n        self.scale = qk_scale or head_dim ** -0.5\n\n        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)\n        self.attn_drop = nn.Dropout(attn_drop)\n        self.proj = nn.Linear(dim, dim)\n        self.proj_drop = nn.Dropout(proj_drop)\n\n    def forward(self, x):\n        B, N, C = x.shape\n        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)\n        q, k, v = qkv[0], qkv[1], qkv[2]  # make torchscript happy (cannot use tensor as tuple)\n\n        attn = (q @ k.transpose(-2, -1)) * self.scale\n        attn = attn.softmax(dim=-1)\n        attn = self.attn_drop(attn)\n\n        x = (attn @ v).transpose(1, 2).reshape(B, N, C)\n        x = self.proj(x)\n        x = self.proj_drop(x)\n        return x,q,k,v\n\n\nclass Block(nn.Module):\n\n    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,\n                 drop_path=0., act_layer=nn.GELU, norm_layer=partial(nn.LayerNorm, eps=1e-6)):\n        super().__init__()\n        self.norm1 = norm_layer(dim)\n        self.attn = Attention(\n            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)\n        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here\n        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()\n        self.norm2 = norm_layer(dim)\n        mlp_hidden_dim = int(dim * mlp_ratio)\n        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)\n\n    def forward(self, x):\n        x_norm=self.norm1(x)\n        x_att,q,k,v=self.attn(x_norm)\n        x = x + self.drop_path(x_att)\n        x = x + self.drop_path(self.mlp(self.norm2(x)))\n        return x,x_att,q,k,v\n\n\nclass ConvBlock(nn.Module):\n\n    def __init__(self, inplanes, outplanes, stride=1, res_conv=False, act_layer=nn.ReLU, groups=1,\n                 norm_layer=partial(nn.BatchNorm2d, eps=1e-6), drop_block=None, drop_path=None):\n        super(ConvBlock, self).__init__()\n\n        expansion = 4\n        med_planes = outplanes // expansion\n\n        self.conv1 = nn.Conv2d(inplanes, med_planes, kernel_size=1, stride=1, padding=0, bias=False)\n        self.bn1 = norm_layer(med_planes)\n        self.act1 = act_layer(inplace=True)\n\n        self.conv2 = nn.Conv2d(med_planes, med_planes, kernel_size=3, stride=stride, groups=groups, padding=1, bias=False)\n        self.bn2 = norm_layer(med_planes)\n        self.act2 = act_layer(inplace=True)\n\n        self.conv3 = nn.Conv2d(med_planes, outplanes, kernel_size=1, stride=1, padding=0, bias=False)\n        self.bn3 = norm_layer(outplanes)\n        self.act3 = act_layer(inplace=True)\n\n        if res_conv:\n            self.residual_conv = nn.Conv2d(inplanes, outplanes, kernel_size=1, stride=stride, padding=0, bias=False)\n            self.residual_bn = norm_layer(outplanes)\n\n        self.res_conv = res_conv\n        self.drop_block = drop_block\n        self.drop_path = drop_path\n\n    def zero_init_last_bn(self):\n        nn.init.zeros_(self.bn3.weight)\n\n    def forward(self, x, x_t=None, return_x_2=True):\n        residual = x\n\n        x = self.conv1(x)\n        x = self.bn1(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n        x = self.act1(x)\n\n        x = self.conv2(x) if x_t is None else self.conv2(x + x_t)\n        x = self.bn2(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n        x2 = self.act2(x)\n\n        x = self.conv3(x2)\n        x = self.bn3(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n\n        if self.drop_path is not None:\n            x = self.drop_path(x)\n\n        if self.res_conv:\n            residual = self.residual_conv(residual)\n            residual = self.residual_bn(residual)\n\n        x += residual\n        x = self.act3(x)\n\n        if return_x_2:\n            return x, x2\n        else:\n            return x\n\n\nclass FCUDown(nn.Module):\n    \"\"\" CNN feature maps -> Transformer patch embeddings\n    \"\"\"\n\n    def __init__(self, inplanes, outplanes, dw_stride, act_layer=nn.GELU,\n                 norm_layer=partial(nn.LayerNorm, eps=1e-6)):\n        super(FCUDown, self).__init__()\n        self.dw_stride = dw_stride\n\n        self.conv_project = nn.Conv2d(inplanes, outplanes, kernel_size=1, stride=1, padding=0)\n        self.sample_pooling = nn.AvgPool2d(kernel_size=dw_stride, stride=dw_stride)\n\n        self.ln = norm_layer(outplanes)\n        self.act = act_layer()\n\n    def forward(self, x, x_t):\n        x = self.conv_project(x)  # [N, C, H, W]\n\n        x = self.sample_pooling(x).flatten(2).transpose(1, 2)\n        x = self.ln(x)\n        x = self.act(x)\n\n        x = torch.cat([x_t[:, 0][:, None, :], x], dim=1)\n\n        return x\n\n\nclass FCUUp(nn.Module):\n    \"\"\" Transformer patch embeddings -> CNN feature maps\n    \"\"\"\n\n    def __init__(self, inplanes, outplanes, up_stride, act_layer=nn.ReLU,\n                 norm_layer=partial(nn.BatchNorm2d, eps=1e-6),):\n        super(FCUUp, self).__init__()\n\n        self.up_stride = up_stride\n        self.conv_project = nn.Conv2d(inplanes, outplanes, kernel_size=1, stride=1, padding=0)\n        self.bn = norm_layer(outplanes)\n        self.act = act_layer()\n\n    def forward(self, x, H, W):\n        B, _, C = x.shape\n        # [N, 197, 384] -> [N, 196, 384] -> [N, 384, 196] -> [N, 384, 14, 14]\n        x_r = x[:, 1:].transpose(1, 2).reshape(B, C, H, W)\n        x_r = self.act(self.bn(self.conv_project(x_r)))\n\n        return F.interpolate(x_r, size=(H * self.up_stride, W * self.up_stride))\n\n\nclass Med_ConvBlock(nn.Module):\n    \"\"\" special case for Convblock with down sampling,\n    \"\"\"\n    def __init__(self, inplanes, act_layer=nn.ReLU, groups=1, norm_layer=partial(nn.BatchNorm2d, eps=1e-6),\n                 drop_block=None, drop_path=None):\n\n        super(Med_ConvBlock, self).__init__()\n\n        expansion = 4\n        med_planes = inplanes // expansion\n\n        self.conv1 = nn.Conv2d(inplanes, med_planes, kernel_size=1, stride=1, padding=0, bias=False)\n        self.bn1 = norm_layer(med_planes)\n        self.act1 = act_layer(inplace=True)\n\n        self.conv2 = nn.Conv2d(med_planes, med_planes, kernel_size=3, stride=1, groups=groups, padding=1, bias=False)\n        self.bn2 = norm_layer(med_planes)\n        self.act2 = act_layer(inplace=True)\n\n        self.conv3 = nn.Conv2d(med_planes, inplanes, kernel_size=1, stride=1, padding=0, bias=False)\n        self.bn3 = norm_layer(inplanes)\n        self.act3 = act_layer(inplace=True)\n\n        self.drop_block = drop_block\n        self.drop_path = drop_path\n\n    def zero_init_last_bn(self):\n        nn.init.zeros_(self.bn3.weight)\n\n    def forward(self, x):\n        residual = x\n\n        x = self.conv1(x)\n        x = self.bn1(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n        x = self.act1(x)\n\n        x = self.conv2(x)\n        x = self.bn2(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n        x = self.act2(x)\n\n        x = self.conv3(x)\n        x = self.bn3(x)\n        if self.drop_block is not None:\n            x = self.drop_block(x)\n\n        if self.drop_path is not None:\n            x = self.drop_path(x)\n\n        x += residual\n        x = self.act3(x)\n\n        return x\n\n\nclass ConvTransBlock(nn.Module):\n    \"\"\"\n    Basic module for ConvTransformer, keep feature maps for CNN block and patch embeddings for transformer encoder block\n    \"\"\"\n\n    def __init__(self, inplanes, outplanes, res_conv, stride, dw_stride, embed_dim, num_heads=12, mlp_ratio=4.,\n                 qkv_bias=False, qk_scale=None, drop_rate=0., attn_drop_rate=0., drop_path_rate=0.,\n                 last_fusion=False, num_med_block=0, groups=1):\n\n        super(ConvTransBlock, self).__init__()\n        expansion = 4\n        self.cnn_block = ConvBlock(inplanes=inplanes, outplanes=outplanes, res_conv=res_conv, stride=stride, groups=groups)\n\n        if last_fusion:\n            self.fusion_block = ConvBlock(inplanes=outplanes, outplanes=outplanes, stride=2, res_conv=True, groups=groups)\n        else:\n            self.fusion_block = ConvBlock(inplanes=outplanes, outplanes=outplanes, groups=groups)\n\n        if num_med_block > 0:\n            self.med_block = []\n            for i in range(num_med_block):\n                self.med_block.append(Med_ConvBlock(inplanes=outplanes, groups=groups))\n            self.med_block = nn.ModuleList(self.med_block)\n\n        self.squeeze_block = FCUDown(inplanes=outplanes // expansion, outplanes=embed_dim, dw_stride=dw_stride)\n\n        self.expand_block = FCUUp(inplanes=embed_dim, outplanes=outplanes // expansion, up_stride=dw_stride)\n\n        self.trans_block = Block(\n            dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n            drop=drop_rate, attn_drop=attn_drop_rate, drop_path=drop_path_rate)\n\n        self.dw_stride = dw_stride\n        self.embed_dim = embed_dim\n        self.num_med_block = num_med_block\n        self.last_fusion = last_fusion\n\n    def forward(self, x, x_t):\n        x, x2 = self.cnn_block(x)\n        #print('cnn_block',x.shape,x2.shape)\n        _, _, H, W = x2.shape\n\n        x_st = self.squeeze_block(x2, x_t)\n        #print('FCdown_block',x_st.shape)\n        x_t,x_att,q,k,v = self.trans_block(x_st + x_t)\n        #print('tran_block',x_t.shape,q.shape)\n        if self.num_med_block > 0:\n            for m in self.med_block:\n                x = m(x)\n\n        x_t_r = self.expand_block(x_t, H // self.dw_stride, W // self.dw_stride)\n        #print('FCUP_block',x_t_r.shape)\n        x = self.fusion_block(x, x_t_r, return_x_2=False)\n        #print('fusion_block',x.shape)\n\n        return x,x_att, x_t,q,k,v\n\n\nclass Conformer(nn.Module):\n\n    def __init__(self, patch_size=16, in_chans=3, num_classes=1000, base_channel=64, channel_ratio=4, num_med_block=0,\n                 embed_dim=768, depth=12, num_heads=12, mlp_ratio=4., qkv_bias=False, qk_scale=None,\n                 drop_rate=0., attn_drop_rate=0., drop_path_rate=0.):\n\n        # Transformer\n        super().__init__()\n        self.num_classes = num_classes\n        self.num_features = self.embed_dim = embed_dim  # num_features for consistency with other models\n        assert depth % 3 == 0\n\n        self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))\n        self.trans_dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule\n\n        # Classifier head\n        self.trans_norm = nn.LayerNorm(embed_dim)\n        self.trans_cls_head = nn.Linear(embed_dim, num_classes) if num_classes > 0 else nn.Identity()\n        self.pooling = nn.AdaptiveAvgPool2d(1)\n        self.conv_cls_head = nn.Linear(int(256 * channel_ratio), num_classes)\n\n        # Stem stage: get the feature maps by conv block (copied form resnet.py)\n        self.conv1 = nn.Conv2d(in_chans, 64, kernel_size=7, stride=2, padding=3, bias=False)  # 1 / 2 [112, 112]\n        self.bn1 = nn.BatchNorm2d(64)\n        self.act1 = nn.ReLU(inplace=True)\n        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  # 1 / 4 [56, 56]\n\n        # 1 stage\n        stage_1_channel = int(base_channel * channel_ratio)\n        trans_dw_stride = patch_size // 4\n        self.conv_1 = ConvBlock(inplanes=64, outplanes=stage_1_channel, res_conv=True, stride=1)\n        self.trans_patch_conv = nn.Conv2d(64, embed_dim, kernel_size=trans_dw_stride, stride=trans_dw_stride, padding=0)\n        self.trans_1 = Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias,\n                             qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=self.trans_dpr[0],\n                             )\n\n        # 2~4 stage\n        init_stage = 2\n        fin_stage = depth // 3 + 1\n        for i in range(init_stage, fin_stage):\n            self.add_module('conv_trans_' + str(i),\n                    ConvTransBlock(\n                        stage_1_channel, stage_1_channel, False, 1, dw_stride=trans_dw_stride, embed_dim=embed_dim,\n                        num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n                        drop_rate=drop_rate, attn_drop_rate=attn_drop_rate, drop_path_rate=self.trans_dpr[i-1],\n                        num_med_block=num_med_block\n                    )\n            )\n\n\n        stage_2_channel = int(base_channel * channel_ratio * 2)\n        # 5~8 stage\n        init_stage = fin_stage # 5\n        fin_stage = fin_stage + depth // 3 # 9\n        for i in range(init_stage, fin_stage):\n            s = 2 if i == init_stage else 1\n            in_channel = stage_1_channel if i == init_stage else stage_2_channel\n            res_conv = True if i == init_stage else False\n            self.add_module('conv_trans_' + str(i),\n                    ConvTransBlock(\n                        in_channel, stage_2_channel, res_conv, s, dw_stride=trans_dw_stride // 2, embed_dim=embed_dim,\n                        num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n                        drop_rate=drop_rate, attn_drop_rate=attn_drop_rate, drop_path_rate=self.trans_dpr[i-1],\n                        num_med_block=num_med_block\n                    )\n            )\n\n        stage_3_channel = int(base_channel * channel_ratio * 2 * 2)\n        # 9~12 stage\n        init_stage = fin_stage  # 9\n        fin_stage = fin_stage + depth // 3  # 13\n        for i in range(init_stage, fin_stage):\n            s = 2 if i == init_stage else 1\n            in_channel = stage_2_channel if i == init_stage else stage_3_channel\n            res_conv = True if i == init_stage else False\n            last_fusion = True if i == depth else False\n            self.add_module('conv_trans_' + str(i),\n                    ConvTransBlock(\n                        in_channel, stage_3_channel, res_conv, s, dw_stride=trans_dw_stride // 4, embed_dim=embed_dim,\n                        num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale,\n                        drop_rate=drop_rate, attn_drop_rate=attn_drop_rate, drop_path_rate=self.trans_dpr[i-1],\n                        num_med_block=num_med_block, last_fusion=last_fusion\n                    )\n            )\n        self.fin_stage = fin_stage\n\n        trunc_normal_(self.cls_token, std=.02)\n\n        self.apply(self._init_weights)\n\n    def _init_weights(self, m):\n        if isinstance(m, nn.Linear):\n            trunc_normal_(m.weight, std=.02)\n            if isinstance(m, nn.Linear) and m.bias is not None:\n                nn.init.constant_(m.bias, 0)\n        elif isinstance(m, nn.LayerNorm):\n            nn.init.constant_(m.bias, 0)\n            nn.init.constant_(m.weight, 1.0)\n        elif isinstance(m, nn.Conv2d):\n            nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')\n        elif isinstance(m, nn.BatchNorm2d):\n            nn.init.constant_(m.weight, 1.)\n            nn.init.constant_(m.bias, 0.)\n        elif isinstance(m, nn.GroupNorm):\n            nn.init.constant_(m.weight, 1.)\n            nn.init.constant_(m.bias, 0.)\n\n    @torch.jit.ignore\n    def no_weight_decay(self):\n        return {'cls_token'}\n\n\n    def forward(self, x,y):\n        #B = x.shape[0]\n        B = y.shape[0]\n        cls_tokens = self.cls_token.expand(B, -1, -1)\n        conv_features=[]\n        tran_features=[]\n        q=[]\n        k=[]\n        v=[]\n        x_att=[]\n        # pdb.set_trace()\n        # stem stage [N, 3, 224, 224] -> [N, 64, 56, 56]\n        x_base = self.maxpool(self.act1(self.bn1(self.conv1(x))))\n        y_base = self.maxpool(self.act1(self.bn1(self.conv1(y))))\n        #print('x_base',x_base.shape)\n        conv_features.append(x_base)\n        tran_features.append(y_base)\n        # 1 stage\n        x = self.conv_1(x_base, return_x_2=False)\n        conv_features.append(x)\n\n        y_t = self.trans_patch_conv(y_base).flatten(2).transpose(1, 2)\n        #print('x_t flatten',x_t.shape)\n        tran_features.append(y_t)\n       \n        y_t = torch.cat([cls_tokens, y_t], dim=1)\n        #print('y_t n tokens',y_t.shape)\n        y_t,x_att1,q1,k1,v1 = self.trans_1(y_t)\n        #print('y_t tran_1 q k  v',y_t.shape,q1.shape,k1.shape,v1.shape)\n        tran_features.append(y_t)\n        q.append(q1)\n        k.append(k1)\n        v.append(v1)\n        x_att.append(x_att1)\n        # 2 ~ final \n        for i in range(2, self.fin_stage):\n            x, x_atti,y_t,qi,ki,vi = eval('self.conv_trans_' + str(i))(x, y_t)\n            conv_features.append(x)\n            tran_features.append(y_t)\n            q.append(qi)\n            k.append(ki)\n            v.append(vi)\n            x_att.append(x_atti)\n        \n        return conv_features,tran_features,q,k,v,x_att\n\nclass JLModule(nn.Module):\n    def __init__(self, backbone):\n        super(JLModule, self).__init__()\n        self.backbone = backbone\n        \n\n    def load_pretrained_model(self, model_path):\n        pretrained_dict = torch.load(model_path)\n        model_dict = self.backbone.state_dict()\n        pretrained_dict = {ka: va for ka, va in pretrained_dict.items() if ka in model_dict}\n        model_dict.update(pretrained_dict)\n        self.backbone.load_state_dict(model_dict)\n        \n\n    def forward(self, x,y):\n\n        conv,tran,q,k,v,x_att = self.backbone(x,y)\n        '''print(\"Conformer Backbone\")\n        for i in range(len(conv)):\n            print(i,\"     \",conv[i].shape,tran[i].shape)'''\n        \n\n        return conv,tran,q,k,v,x_att # list of tensor that compress model output\n\nclass ShuffleChannelAttention(nn.Module):\n    def __init__(self, channel=64,reduction=16,kernel_size=3,groups=8):\n        super(ShuffleChannelAttention, self).__init__()\n        self.maxpool=nn.AdaptiveMaxPool2d(1)\n        self.g=groups\n        self.se=nn.Sequential(\n            nn.Conv2d(channel,channel//reduction,1,padding=1,bias=False),\n            nn.ReLU(),\n            nn.Conv2d(channel//reduction,channel,3,bias=False)\n        )\n        self.sigmoid=nn.Sigmoid()\n        \n    \n    def forward(self, x) :\n        b,c,h,w=x.shape\n        residual=x\n        max_result=self.maxpool(x)\n        #print('***Shuffle chaneel***')\n        #print('max',max_result.shape)\n        shuffled_in=max_result.view(b,self.g,c//self.g,1,1).permute(0,2,1,3,4).reshape(b,c,1,1)\n        #print('shuffled',shuffled_in.shape)\n        max_out=self.se(shuffled_in)\n        #print('se',max_out.shape)\n        output1=self.sigmoid(max_out)\n        output1=output1.view(b,c,1,1)\n        #print('output1',output1.shape)\n        output2=self.sigmoid(max_result)\n        output=output1+output2\n        return (output*x)+residual\n\nclass LDELayer(nn.Module):\n    def __init__(self):\n        super(LDELayer, self).__init__()\n        self.operation_stage_1=nn.Sequential(nn.Conv2d(384,64,kernel_size=7,stride=1,padding=6,dilation=2), nn.ReLU())  \n        self.operation_stage_2=nn.Sequential(nn.Conv2d(384,64,kernel_size=5,stride=1,padding=4,dilation=2), nn.ReLU())\n        self.operation_stage_3=nn.Sequential(nn.Conv2d(384,64,kernel_size=3,stride=1,padding=2,dilation=2), nn.ReLU())\n        self.operation_stage_4=nn.AvgPool2d(4,4)        \t\t\n        self.operation_stage_5=nn.MaxPool2d(4,4)\n        self.ca_1=ShuffleChannelAttention(channel=576,reduction=16,kernel_size=3,groups=4)\n        self.ca_2=ShuffleChannelAttention(channel=576,reduction=16,kernel_size=3,groups=8)\n        self.ca_3=ShuffleChannelAttention(channel=576,reduction=16,kernel_size=3,groups=16)\n        self.ca_4=ShuffleChannelAttention(channel=576,reduction=16,kernel_size=3,groups=32)\n        self.ca_5=ShuffleChannelAttention(channel=576,reduction=16,kernel_size=3,groups=64)\n        self.upsample=nn.ConvTranspose2d(576, 64, kernel_size=3, stride=4, padding=1, output_padding=3,dilation=1)\n        self.upsample_1=nn.ConvTranspose2d(384, 96, kernel_size=3, stride=4, padding=1, output_padding=3,dilation=1)\n        self.conv1x1=nn.Conv2d(576,384,1,1)\n        self.last_conv1x1=nn.Conv2d(384,1,1,1)\n       \n\n    def forward(self, list_x,list_y):\n        lde_out=[]\n        \n        for i in range(len(list_x)):\n        \n            rgb_conv = list_x[i]\n         \n            depth_tran = list_y[i]\n            #print(\"******LDE layer******\")\n            #print(i,\"     \",rgb_conv.shape,depth_tran.shape)\n\n        init_stage = 2\n        depth=12\n        fin_stage = depth // 3 + 1\n        for j in range(init_stage, fin_stage):\n            B,_,C=list_y[j].shape\n            #print('j=',j)\n            rgb_1=self.operation_stage_1(list_x[j])\n            #print('rgb_operation_1',rgb_1.shape)\n       \n            rgb_2=self.operation_stage_2(list_x[j])\n            #print('rgb_operation_2',rgb_2.shape)\n            rgb_3=self.operation_stage_3(list_x[j])\n            #print('rgb_operation_3',rgb_3.shape)\n            rgb_4=self.operation_stage_4(list_x[j])\n            #print('rgb_operation_4',rgb_4.shape)\n            rgb_5=self.operation_stage_5(list_x[j])\n            #print('rgb_operation_5',rgb_5.shape)\n            x=list_y[j]\n            x_r = x[:, 1:].transpose(1, 2).reshape(B, C, 20,20)\n            #print(\"*******tran in lde*****\")\n            #print('initial tran shape',x_r.shape)\n            depth_1=self.upsample(self.ca_1(x_r))\n            #print('depth_1',depth_1.shape)\n            depth_2=self.upsample(self.ca_2(x_r))\n            #print('depth_2',depth_2.shape)\n            depth_3=self.upsample(self.ca_3(x_r))\n            #print('depth_3',depth_3.shape)\n            depth_4=self.conv1x1(self.ca_4(x_r))\n            #print('depth_4',depth_4.shape)\n            depth_5=self.conv1x1(self.ca_5(x_r))\n            #print('depth_5',depth_5.shape)\n            rgbd_fusion_1=rgb_1*depth_1\n            rgbd_fusion_2=rgb_2*depth_2\n            rgbd_fusion_3=rgb_3*depth_3\n            rgbd_fusion_4=self.upsample_1(rgb_4*depth_4)\n            rgbd_fusion_5=self.upsample_1(rgb_5*depth_5)\n            '''print('rgbd_fusion_1',rgbd_fusion_1.shape)  \n            print('rgbd_fusion_2',rgbd_fusion_2.shape) \n            print('rgbd_fusion_3',rgbd_fusion_3.shape) \n            print('rgbd_fusion_4',rgbd_fusion_4.shape) \n            print('rgbd_fusion_5',rgbd_fusion_5.shape)'''      \n            c_cat=torch.cat((rgbd_fusion_1,rgbd_fusion_2,rgbd_fusion_3,rgbd_fusion_4,rgbd_fusion_5),dim=1)  \n            #print('c_cat',c_cat.shape)  \n            last_out=list_x[j]+self.last_conv1x1(c_cat)\n            #print('last',last_out.shape)\n            lde_out.append(last_out)\n\n\n        return lde_out,rgb_1,rgb_2,rgb_3,rgb_4,rgb_5,depth_1,depth_2,depth_3,depth_4,depth_5,rgbd_fusion_1,rgbd_fusion_2,rgbd_fusion_3,rgbd_fusion_4,rgbd_fusion_5\n\n\nclass CoarseLayer(nn.Module):\n    def __init__(self):\n        super(CoarseLayer, self).__init__()\n        self.relu = nn.ReLU()\n        self.conv_r = nn.Sequential(nn.Conv2d(1536,768,1,1),self.relu,nn.Conv2d(768, 1, 1, 1))\n        self.conv_d=  nn.Sequential(nn.Conv2d(576,192,1,1),self.relu,nn.Conv2d(192,1,3,2,1))\n        \n\n    def forward(self, x, y):\n        #print('********coarse layer******')\n        #print('corase',x.shape,y.shape)\n        B, _, C = y.shape\n        _,_,H,W=x.shape\n        y_r = y[:, 1:].transpose(1, 2).unflatten(2,(H*2,W*2))\n        #print('after corase transformation',x.shape,y_r.shape)\n        sal_rgb=self.conv_r(x)\n        sal_depth=self.conv_d(y_r)\n        #print('sal r and d ',sal_rgb.shape,sal_depth.shape)\n        return sal_rgb,sal_depth\n\nclass GDELayer(nn.Module):\n    def __init__(self):\n        super(GDELayer, self).__init__()\n        k=1\n        self.sigmoid = nn.Sigmoid()\n        self.relu = nn.ReLU()\n        self.conv1024=nn.Sequential(nn.Conv2d(1536,768,1,1),self.relu,nn.Conv2d(768,1,1,1))\n        self.conv512=nn.Sequential(nn.Conv2d(768,384,1,1),self.relu,nn.Conv2d(384,1,1,1))\n        self.conv256=nn.Sequential(nn.Conv2d(384,128,1,1),self.relu,nn.Conv2d(128,1,1,1))\n        \n        self.conv384=nn.Sequential(nn.Conv2d(576,192,1,1),self.relu,nn.Conv2d(192,1,1,1))\n        self.upsampling= nn.ConvTranspose2d(k,k, kernel_size=4, stride=2 , padding=1) # 10x10 to 20x20\n        self.upsampling11= nn.ConvTranspose2d(k,k, kernel_size=4, stride=4 , padding=0)# 10x10 to 40x40\n        self.upsampling12=nn.ConvTranspose2d(1,1, kernel_size=5, stride=8 , padding=0,output_padding=3) # 10x10 t0 80x80\n        self.upsampling22= nn.ConvTranspose2d(576,k, kernel_size=4, stride=2 , padding=1) \n        self.upsampling222= nn.ConvTranspose2d(576,1, kernel_size=4, stride=4 , padding=0)\n        \n\n    def forward(self, x, y,coarse_sal_rgb,coarse_sal_depth):\n        #print('********GDE layer*******')\n        rgb_h=torch.zeros(coarse_sal_rgb.size(0),1,20,20).cuda()\n        rgb_m=torch.zeros(coarse_sal_rgb.size(0),1,40,40).cuda()\n        depth_h=torch.zeros(coarse_sal_rgb.size(0),1,20,20).cuda()\n        depth_m=torch.zeros(coarse_sal_rgb.size(0),1,40,40).cuda()\n        rgb_l=torch.zeros(coarse_sal_rgb.size(0),1,80,80).cuda()\n        depth_l=torch.zeros(coarse_sal_rgb.size(0),1,80,80).cuda()\n        for j in range(11,7,-3):\n            rgb_part=x[j]\n            depth_part=y[j]\n            B, _, C = depth_part.shape\n            Br,Cr,Hr,Wr=x[j].shape\n            # [N, 197, 384] -> [N, 196, 384] -> [N, 384, 196] -> [N, 384, 14, 14]\n\n            #x_r = self.act(self.bn(self.conv_project(x_r)))\n      \n            #print('before j rgb depth',j,rgb_part.shape,depth_part.shape)\n            if (rgb_part.size(1)==1536):\n                rgb_part=self.conv1024(rgb_part)\n                coarse_sal_rgb1=self.upsampling(coarse_sal_rgb)\n                coarse_sal_depth1=self.upsampling(coarse_sal_depth)\n                y_r = depth_part[:, 1:].transpose(1, 2).unflatten(2,(20,20))\n                y_r=self.conv384(y_r)\n\n                salr=self.sigmoid(coarse_sal_rgb1)\n                Ar=1-salr\n                rgb_h+=Ar*rgb_part\n\n                sald=self.sigmoid(coarse_sal_depth1)\n                Ad=1-sald\n                depth_h+=Ad*y_r\n                #print('j, rgb after,coarse_rgb_after,depth after, coarse_depth_after,Ar,Ad',j,rgb_part.shape,coarse_sal_rgb1.shape,y_r.shape,coarse_sal_depth1.shape,Ar.shape,Ad.shape)\n            \n\n\n            else:\n                rgb_part=self.conv512(rgb_part)\n                coarse_sal_rgb1=self.upsampling11(coarse_sal_rgb)\n                coarse_sal_depth1=self.upsampling11(coarse_sal_depth)\n                y_r = depth_part[:, 1:].transpose(1, 2).unflatten(2,(20,20))\n                y_r=self.upsampling22(y_r)\n\n                salr=self.sigmoid(coarse_sal_rgb1)\n                Ar=1-salr\n                rgb_m+=Ar*rgb_part\n\n                sald=self.sigmoid(coarse_sal_depth1)\n                Ad=1-sald\n                depth_m+=Ad*y_r\n                #print('j, rgb after,coarse_rgb_after,depth after, coarse_depth_after,Ar,Ad',j,rgb_part.shape,coarse_sal_rgb1.shape,y_r.shape,coarse_sal_depth1.shape,Ar.shape,Ad.shape)\n                \n        j=4\n        rgb_part=x[j]\n        depth_part=y[j]\n        B, _, C = depth_part.shape\n        Br,Cr,Hr,Wr=x[j].shape\n        # [N, 197, 384] -> [N, 196, 384] -> [N, 384, 196] -> [N, 384, 14, 14]\n\n        rgb_part=self.conv256(rgb_part)\n        coarse_sal_rgb1=self.upsampling12(coarse_sal_rgb)\n        coarse_sal_depth1=self.upsampling12(coarse_sal_depth)\n        y_r = depth_part[:, 1:].transpose(1, 2).unflatten(2,(20,20))\n        y_r=self.upsampling222(y_r)\n\n        salr=self.sigmoid(coarse_sal_rgb1)\n        Ar=1-salr\n        rgb_l+=Ar*rgb_part\n\n        sald=self.sigmoid(coarse_sal_depth1)\n        Ad=1-sald\n        depth_l+=Ad*y_r\n        #print('j, rgb after,coarse_rgb_after,depth after, coarse_depth_after,Ar,Ad',j,rgb_part.shape,coarse_sal_rgb1.shape,y_r.shape,coarse_sal_depth1.shape,Ar.shape,Ad.shape)\n            \n            \n        #print('gde',rgb_h.shape,rgb_m.shape,depth_h.shape,depth_m.shape)     \n        return rgb_h,rgb_m,depth_h,depth_m,rgb_l,depth_l\n\nclass Decoder(nn.Module):\n    def __init__(self):\n        super(Decoder, self).__init__()\n        self.upsample=nn.ConvTranspose2d(384, 1, kernel_size=3, stride=2, padding=1, output_padding=1,dilation=1)\n        #self.upsample1=nn.ConvTranspose2d(576, 1, kernel_size=3, stride=4, padding=1, output_padding=3,dilation=1)\n        self.up2= nn.ConvTranspose2d(1, 1, kernel_size=4, stride=2, padding=1) \n        #self.up2= nn.ConvTranspose2d(1, 1, kernel_size=3, stride=2, padding=2)\n        self.up21= nn.ConvTranspose2d(1, 1, kernel_size=4, stride=2, padding=1) \n        self.act=nn.Sigmoid()\n        \n        \n        \n    def forward(self, lde_out ,rgb_h,rgb_m,depth_h,depth_m,rgb_l,depth_l):\n        sal_high=rgb_h+depth_h\n        sal_med=rgb_m+depth_m\n        sal_low=rgb_l+depth_l\n       \n        lde_out1=self.upsample(lde_out[0])\n      \n\n        lde_out2=self.upsample(lde_out[1])\n        \n\n        lde_out3=self.upsample(lde_out[2])\n        \n        edge_rgbd0=self.act(self.up21(lde_out1))\n        edge_rgbd1=self.act(self.up21(lde_out2))\n        edge_rgbd2=self.act(self.up21(lde_out3))\n        #print(self.up2(sal_high).shape,self.up2(sal_med).shape,self.up2(sal_low).shape,  edge_rgbd0.shape,  edge_rgbd1.shape,  edge_rgbd2.shape)\n        sal_final=edge_rgbd0+edge_rgbd1+edge_rgbd2+self.up2(self.up2(sal_low+self.up2((sal_med+(self.up2(sal_high))))))\n        \n\n        return sal_final,sal_low,sal_med,sal_high,edge_rgbd0,edge_rgbd1,edge_rgbd2\n\n\nclass JL_DCF(nn.Module):\n    def __init__(self,JLModule,lde_layers,coarse_layer,gde_layers,decoder):\n        super(JL_DCF, self).__init__()\n        \n        self.JLModule = JLModule\n        self.lde = lde_layers\n        self.coarse_layer=coarse_layer\n        self.gde_layers=gde_layers\n        self.decoder=decoder\n        self.final_conv=nn.Conv2d(8,1,1,1,0)\n        \n    def forward(self, f_all,f1_all):\n        x,y,q,k,v,Att = self.JLModule(f_all,f1_all)\n        lde_out,rgb_1,rgb_2,rgb_3,rgb_4,rgb_5,depth_1,depth_2,depth_3,depth_4,depth_5,rgbd_fusion_1,rgbd_fusion_2,rgbd_fusion_3,rgbd_fusion_4,rgbd_fusion_5= self.lde(x,y)\n        coarse_sal_rgb,coarse_sal_depth=self.coarse_layer(x[12],y[12])\n        rgb_h,rgb_m,depth_h,depth_m,rgb_l,depth_l=self.gde_layers(x,y,coarse_sal_rgb,coarse_sal_depth)\n\n        sal_final,sal_low,sal_med,sal_high,e_rgbd0,e_rgbd1,e_rgbd2=self.decoder(lde_out ,rgb_h,rgb_m,depth_h,depth_m,rgb_l,depth_l)\n\n        return sal_final\ndef build_model(network='conformer', base_model_cfg='conformer'):\n   \n        backbone= Conformer(patch_size=16, channel_ratio=6, embed_dim=576, depth=12,\n                      num_heads=9, mlp_ratio=4, qkv_bias=True)\n        \n   \n\n        return JL_DCF(JLModule(backbone),LDELayer(),CoarseLayer(),GDELayer(),Decoder())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T19:32:56.891803Z","iopub.execute_input":"2025-07-16T19:32:56.892089Z","iopub.status.idle":"2025-07-16T19:32:56.907790Z","shell.execute_reply.started":"2025-07-16T19:32:56.892067Z","shell.execute_reply":"2025-07-16T19:32:56.907056Z"}},"outputs":[{"name":"stdout","text":"Overwriting /kaggle/working/Camouflage-Object-Detection/cvit-main-2/conformer.py\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"## Training the Model\nWe will now **train** our Dataset to generate a Model Checkpoint using **COD10K Training Dataset** using the following command.","metadata":{}},{"cell_type":"code","source":"!python /kaggle/working/Camouflage-Object-Detection/cvit-main-2/main.py \\\n  --mode=train \\\n  --train_root=/kaggle/input/traindataset/COD10K-Train \\\n  --train_list=/kaggle/working/cod10k_training.lst \\\n  --arch=conformer \\\n  --network=conformer \\\n  --pretrained_model=/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth \\\n  --save_folder=/kaggle/working/checkpoints/ \\\n  --batch_size=8 \\\n  --epoch=10 \\\n  --image_size=320\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T21:11:31.951106Z","iopub.execute_input":"2025-07-16T21:11:31.951741Z"}},"outputs":[{"name":"stdout","text":"/usr/local/lib/python3.11/dist-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers\n  warnings.warn(f\"Importing from {__name__} is deprecated, please import via timm.layers\", FutureWarning)\n2025-07-16 21:11:36.969530: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1752700296.992788     236 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1752700296.999954     236 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\nLoading pre-trained ImageNet weights\nConformer-based RGB COD Model\nThe number of trainable parameters: 90204545\nThe number of parameters: 0\nFlops: 202.17 GFLOPS\nFlops: 90.2 M\nEpoch [1/10], Iter [6/750], Loss: 1.0954\nEpoch [1/10], Iter [12/750], Loss: 1.0620\nEpoch [1/10], Iter [18/750], Loss: 1.0465\nEpoch [1/10], Iter [24/750], Loss: 1.0266\nEpoch [1/10], Iter [30/750], Loss: 1.0180\nEpoch [1/10], Iter [36/750], Loss: 1.0120\nEpoch [1/10], Iter [42/750], Loss: 0.9982\nEpoch [1/10], Iter [48/750], Loss: 0.9900\nEpoch [1/10], Iter [54/750], Loss: 0.9799\nEpoch [1/10], Iter [60/750], Loss: 0.9748\nEpoch [1/10], Iter [66/750], Loss: 0.9704\nEpoch [1/10], Iter [72/750], Loss: 0.9656\nEpoch [1/10], Iter [78/750], Loss: 0.9622\nEpoch [1/10], Iter [84/750], Loss: 0.9573\nEpoch [1/10], Iter [90/750], Loss: 0.9513\nEpoch [1/10], Iter [96/750], Loss: 0.9488\nEpoch [1/10], Iter [102/750], Loss: 0.9473\nEpoch [1/10], Iter [108/750], Loss: 0.9463\nEpoch [1/10], Iter [114/750], Loss: 0.9436\nEpoch [1/10], Iter [120/750], Loss: 0.9405\nEpoch [1/10], Iter [126/750], Loss: 0.9373\nEpoch [1/10], Iter [132/750], Loss: 0.9356\nEpoch [1/10], Iter [138/750], Loss: 0.9335\nEpoch [1/10], Iter [144/750], Loss: 0.9305\nEpoch [1/10], Iter [150/750], Loss: 0.9286\nEpoch [1/10], Iter [156/750], Loss: 0.9267\nEpoch [1/10], Iter [162/750], Loss: 0.9258\nEpoch [1/10], Iter [168/750], Loss: 0.9235\nEpoch [1/10], Iter [174/750], Loss: 0.9222\nEpoch [1/10], Iter [180/750], Loss: 0.9209\nEpoch [1/10], Iter [186/750], Loss: 0.9194\nEpoch [1/10], Iter [192/750], Loss: 0.9176\nEpoch [1/10], Iter [198/750], Loss: 0.9156\nEpoch [1/10], Iter [204/750], Loss: 0.9135\nEpoch [1/10], Iter [210/750], Loss: 0.9114\nEpoch [1/10], Iter [216/750], Loss: 0.9093\nEpoch [1/10], Iter [222/750], Loss: 0.9068\nEpoch [1/10], Iter [228/750], Loss: 0.9053\nEpoch [1/10], Iter [234/750], Loss: 0.9037\nEpoch [1/10], Iter [240/750], Loss: 0.9015\nEpoch [1/10], Iter [246/750], Loss: 0.8999\nEpoch [1/10], Iter [252/750], Loss: 0.8978\nEpoch [1/10], Iter [258/750], Loss: 0.8961\nEpoch [1/10], Iter [264/750], Loss: 0.8941\nEpoch [1/10], Iter [270/750], Loss: 0.8917\nEpoch [1/10], Iter [276/750], Loss: 0.8894\nEpoch [1/10], Iter [282/750], Loss: 0.8870\nEpoch [1/10], Iter [288/750], Loss: 0.8849\nEpoch [1/10], Iter [294/750], Loss: 0.8825\nEpoch [1/10], Iter [300/750], Loss: 0.8802\nEpoch [1/10], Iter [306/750], Loss: 0.8777\nEpoch [1/10], Iter [312/750], Loss: 0.8754\nEpoch [1/10], Iter [318/750], Loss: 0.8729\nEpoch [1/10], Iter [324/750], Loss: 0.8703\nEpoch [1/10], Iter [330/750], Loss: 0.8680\nEpoch [1/10], Iter [336/750], Loss: 0.8655\nEpoch [1/10], Iter [342/750], Loss: 0.8632\nEpoch [1/10], Iter [348/750], Loss: 0.8608\nEpoch [1/10], Iter [354/750], Loss: 0.8581\nEpoch [1/10], Iter [360/750], Loss: 0.8557\nEpoch [1/10], Iter [366/750], Loss: 0.8534\nEpoch [1/10], Iter [372/750], Loss: 0.8509\nEpoch [1/10], Iter [378/750], Loss: 0.8483\nEpoch [1/10], Iter [384/750], Loss: 0.8456\nEpoch [1/10], Iter [390/750], Loss: 0.8431\nEpoch [1/10], Iter [396/750], Loss: 0.8410\nEpoch [1/10], Iter [402/750], Loss: 0.8388\nEpoch [1/10], Iter [408/750], Loss: 0.8366\nEpoch [1/10], Iter [414/750], Loss: 0.8345\nEpoch [1/10], Iter [420/750], Loss: 0.8322\nEpoch [1/10], Iter [426/750], Loss: 0.8302\nEpoch [1/10], Iter [432/750], Loss: 0.8282\nEpoch [1/10], Iter [438/750], Loss: 0.8261\nEpoch [1/10], Iter [444/750], Loss: 0.8240\nEpoch [1/10], Iter [450/750], Loss: 0.8219\nEpoch [1/10], Iter [456/750], Loss: 0.8199\nEpoch [1/10], Iter [462/750], Loss: 0.8180\nEpoch [1/10], Iter [468/750], Loss: 0.8161\nEpoch [1/10], Iter [474/750], Loss: 0.8144\nEpoch [1/10], Iter [480/750], Loss: 0.8128\nEpoch [1/10], Iter [486/750], Loss: 0.8112\nEpoch [1/10], Iter [492/750], Loss: 0.8095\nEpoch [1/10], Iter [498/750], Loss: 0.8079\nEpoch [1/10], Iter [504/750], Loss: 0.8062\nEpoch [1/10], Iter [510/750], Loss: 0.8048\nEpoch [1/10], Iter [516/750], Loss: 0.8032\nEpoch [1/10], Iter [522/750], Loss: 0.8017\nEpoch [1/10], Iter [528/750], Loss: 0.8002\nEpoch [1/10], Iter [534/750], Loss: 0.7987\nEpoch [1/10], Iter [540/750], Loss: 0.7973\nEpoch [1/10], Iter [546/750], Loss: 0.7958\nEpoch [1/10], Iter [552/750], Loss: 0.7943\nEpoch [1/10], Iter [558/750], Loss: 0.7928\nEpoch [1/10], Iter [564/750], Loss: 0.7915\nEpoch [1/10], Iter [570/750], Loss: 0.7902\nEpoch [1/10], Iter [576/750], Loss: 0.7889\nEpoch [1/10], Iter [582/750], Loss: 0.7878\nEpoch [1/10], Iter [588/750], Loss: 0.7866\nEpoch [1/10], Iter [594/750], Loss: 0.7854\nEpoch [1/10], Iter [600/750], Loss: 0.7841\nEpoch [1/10], Iter [606/750], Loss: 0.7830\nEpoch [1/10], Iter [612/750], Loss: 0.7819\nEpoch [1/10], Iter [618/750], Loss: 0.7809\nEpoch [1/10], Iter [624/750], Loss: 0.7798\nEpoch [1/10], Iter [630/750], Loss: 0.7787\nEpoch [1/10], Iter [636/750], Loss: 0.7776\nEpoch [1/10], Iter [642/750], Loss: 0.7766\nEpoch [1/10], Iter [648/750], Loss: 0.7757\nEpoch [1/10], Iter [654/750], Loss: 0.7747\nEpoch [1/10], Iter [660/750], Loss: 0.7737\nEpoch [1/10], Iter [666/750], Loss: 0.7726\nEpoch [1/10], Iter [672/750], Loss: 0.7717\nEpoch [1/10], Iter [678/750], Loss: 0.7708\nEpoch [1/10], Iter [684/750], Loss: 0.7699\nEpoch [1/10], Iter [690/750], Loss: 0.7690\nEpoch [1/10], Iter [696/750], Loss: 0.7681\nEpoch [1/10], Iter [702/750], Loss: 0.7672\nEpoch [1/10], Iter [708/750], Loss: 0.7663\nEpoch [1/10], Iter [714/750], Loss: 0.7654\nEpoch [1/10], Iter [720/750], Loss: 0.7645\nEpoch [1/10], Iter [726/750], Loss: 0.7637\nEpoch [1/10], Iter [732/750], Loss: 0.7629\nEpoch [1/10], Iter [738/750], Loss: 0.7621\nEpoch [1/10], Iter [744/750], Loss: 0.7613\nEpoch [1/10], Iter [750/750], Loss: 0.7606\nEpoch [2/10], Iter [6/750], Loss: 0.6657\nEpoch [2/10], Iter [12/750], Loss: 0.6661\nEpoch [2/10], Iter [18/750], Loss: 0.6639\nEpoch [2/10], Iter [24/750], Loss: 0.6626\nEpoch [2/10], Iter [30/750], Loss: 0.6627\nEpoch [2/10], Iter [36/750], Loss: 0.6624\nEpoch [2/10], Iter [42/750], Loss: 0.6633\nEpoch [2/10], Iter [48/750], Loss: 0.6626\nEpoch [2/10], Iter [54/750], Loss: 0.6636\nEpoch [2/10], Iter [60/750], Loss: 0.6637\nEpoch [2/10], Iter [66/750], Loss: 0.6638\nEpoch [2/10], Iter [72/750], Loss: 0.6640\nEpoch [2/10], Iter [78/750], Loss: 0.6637\nEpoch [2/10], Iter [84/750], Loss: 0.6630\nEpoch [2/10], Iter [90/750], Loss: 0.6625\nEpoch [2/10], Iter [96/750], Loss: 0.6628\nEpoch [2/10], Iter [102/750], Loss: 0.6629\nEpoch [2/10], Iter [108/750], Loss: 0.6627\nEpoch [2/10], Iter [114/750], Loss: 0.6627\nEpoch [2/10], Iter [120/750], Loss: 0.6626\nEpoch [2/10], Iter [126/750], Loss: 0.6624\nEpoch [2/10], Iter [132/750], Loss: 0.6624\nEpoch [2/10], Iter [138/750], Loss: 0.6623\nEpoch [2/10], Iter [144/750], Loss: 0.6623\nEpoch [2/10], Iter [150/750], Loss: 0.6626\nEpoch [2/10], Iter [156/750], Loss: 0.6624\nEpoch [2/10], Iter [162/750], Loss: 0.6625\nEpoch [2/10], Iter [168/750], Loss: 0.6624\nEpoch [2/10], Iter [174/750], Loss: 0.6624\nEpoch [2/10], Iter [180/750], Loss: 0.6623\nEpoch [2/10], Iter [186/750], Loss: 0.6624\nEpoch [2/10], Iter [192/750], Loss: 0.6623\nEpoch [2/10], Iter [198/750], Loss: 0.6621\nEpoch [2/10], Iter [204/750], Loss: 0.6621\nEpoch [2/10], Iter [210/750], Loss: 0.6621\nEpoch [2/10], Iter [216/750], Loss: 0.6618\nEpoch [2/10], Iter [222/750], Loss: 0.6619\nEpoch [2/10], Iter [228/750], Loss: 0.6616\nEpoch [2/10], Iter [234/750], Loss: 0.6612\nEpoch [2/10], Iter [240/750], Loss: 0.6612\nEpoch [2/10], Iter [246/750], Loss: 0.6611\nEpoch [2/10], Iter [252/750], Loss: 0.6610\nEpoch [2/10], Iter [258/750], Loss: 0.6609\nEpoch [2/10], Iter [264/750], Loss: 0.6605\nEpoch [2/10], Iter [270/750], Loss: 0.6602\nEpoch [2/10], Iter [276/750], Loss: 0.6602\nEpoch [2/10], Iter [282/750], Loss: 0.6599\nEpoch [2/10], Iter [288/750], Loss: 0.6598\nEpoch [2/10], Iter [294/750], Loss: 0.6597\nEpoch [2/10], Iter [300/750], Loss: 0.6594\nEpoch [2/10], Iter [306/750], Loss: 0.6593\nEpoch [2/10], Iter [312/750], Loss: 0.6591\nEpoch [2/10], Iter [318/750], Loss: 0.6590\nEpoch [2/10], Iter [324/750], Loss: 0.6588\nEpoch [2/10], Iter [330/750], Loss: 0.6588\nEpoch [2/10], Iter [336/750], Loss: 0.6586\nEpoch [2/10], Iter [342/750], Loss: 0.6584\nEpoch [2/10], Iter [348/750], Loss: 0.6583\nEpoch [2/10], Iter [354/750], Loss: 0.6580\nEpoch [2/10], Iter [360/750], Loss: 0.6579\nEpoch [2/10], Iter [366/750], Loss: 0.6578\nEpoch [2/10], Iter [372/750], Loss: 0.6576\nEpoch [2/10], Iter [378/750], Loss: 0.6572\nEpoch [2/10], Iter [384/750], Loss: 0.6571\nEpoch [2/10], Iter [390/750], Loss: 0.6568\nEpoch [2/10], Iter [396/750], Loss: 0.6565\nEpoch [2/10], Iter [402/750], Loss: 0.6563\nEpoch [2/10], Iter [408/750], Loss: 0.6562\nEpoch [2/10], Iter [414/750], Loss: 0.6561\nEpoch [2/10], Iter [420/750], Loss: 0.6559\nEpoch [2/10], Iter [426/750], Loss: 0.6556\nEpoch [2/10], Iter [432/750], Loss: 0.6555\nEpoch [2/10], Iter [438/750], Loss: 0.6553\nEpoch [2/10], Iter [444/750], Loss: 0.6552\nEpoch [2/10], Iter [450/750], Loss: 0.6551\nEpoch [2/10], Iter [456/750], Loss: 0.6549\nEpoch [2/10], Iter [462/750], Loss: 0.6547\nEpoch [2/10], Iter [468/750], Loss: 0.6546\nEpoch [2/10], Iter [474/750], Loss: 0.6543\nEpoch [2/10], Iter [480/750], Loss: 0.6542\nEpoch [2/10], Iter [486/750], Loss: 0.6539\nEpoch [2/10], Iter [492/750], Loss: 0.6537\nEpoch [2/10], Iter [498/750], Loss: 0.6535\nEpoch [2/10], Iter [504/750], Loss: 0.6533\nEpoch [2/10], Iter [510/750], Loss: 0.6530\nEpoch [2/10], Iter [516/750], Loss: 0.6526\nEpoch [2/10], Iter [522/750], Loss: 0.6525\nEpoch [2/10], Iter [528/750], Loss: 0.6523\nEpoch [2/10], Iter [534/750], Loss: 0.6522\nEpoch [2/10], Iter [540/750], Loss: 0.6519\nEpoch [2/10], Iter [546/750], Loss: 0.6517\nEpoch [2/10], Iter [552/750], Loss: 0.6515\nEpoch [2/10], Iter [558/750], Loss: 0.6512\nEpoch [2/10], Iter [564/750], Loss: 0.6510\nEpoch [2/10], Iter [570/750], Loss: 0.6507\nEpoch [2/10], Iter [576/750], Loss: 0.6506\nEpoch [2/10], Iter [582/750], Loss: 0.6503\nEpoch [2/10], Iter [588/750], Loss: 0.6501\nEpoch [2/10], Iter [594/750], Loss: 0.6500\nEpoch [2/10], Iter [600/750], Loss: 0.6498\nEpoch [2/10], Iter [606/750], Loss: 0.6496\nEpoch [2/10], Iter [612/750], Loss: 0.6493\nEpoch [2/10], Iter [618/750], Loss: 0.6491\nEpoch [2/10], Iter [624/750], Loss: 0.6487\nEpoch [2/10], Iter [630/750], Loss: 0.6484\nEpoch [2/10], Iter [636/750], Loss: 0.6483\nEpoch [2/10], Iter [642/750], Loss: 0.6479\nEpoch [2/10], Iter [648/750], Loss: 0.6476\nEpoch [2/10], Iter [654/750], Loss: 0.6475\nEpoch [2/10], Iter [660/750], Loss: 0.6471\nEpoch [2/10], Iter [666/750], Loss: 0.6468\nEpoch [2/10], Iter [672/750], Loss: 0.6466\nEpoch [2/10], Iter [678/750], Loss: 0.6464\nEpoch [2/10], Iter [684/750], Loss: 0.6462\nEpoch [2/10], Iter [690/750], Loss: 0.6459\nEpoch [2/10], Iter [696/750], Loss: 0.6456\nEpoch [2/10], Iter [702/750], Loss: 0.6454\nEpoch [2/10], Iter [708/750], Loss: 0.6453\nEpoch [2/10], Iter [714/750], Loss: 0.6452\nEpoch [2/10], Iter [720/750], Loss: 0.6449\nEpoch [2/10], Iter [726/750], Loss: 0.6447\nEpoch [2/10], Iter [732/750], Loss: 0.6444\nEpoch [2/10], Iter [738/750], Loss: 0.6442\nEpoch [2/10], Iter [744/750], Loss: 0.6439\nEpoch [2/10], Iter [750/750], Loss: 0.6437\nEpoch [3/10], Iter [6/750], Loss: 0.6307\nEpoch [3/10], Iter [12/750], Loss: 0.6190\nEpoch [3/10], Iter [18/750], Loss: 0.6203\nEpoch [3/10], Iter [24/750], Loss: 0.6175\nEpoch [3/10], Iter [30/750], Loss: 0.6140\nEpoch [3/10], Iter [36/750], Loss: 0.6148\nEpoch [3/10], Iter [42/750], Loss: 0.6157\nEpoch [3/10], Iter [48/750], Loss: 0.6163\nEpoch [3/10], Iter [54/750], Loss: 0.6149\nEpoch [3/10], Iter [60/750], Loss: 0.6161\nEpoch [3/10], Iter [66/750], Loss: 0.6160\nEpoch [3/10], Iter [72/750], Loss: 0.6156\nEpoch [3/10], Iter [78/750], Loss: 0.6150\nEpoch [3/10], Iter [84/750], Loss: 0.6150\nEpoch [3/10], Iter [90/750], Loss: 0.6137\nEpoch [3/10], Iter [96/750], Loss: 0.6122\nEpoch [3/10], Iter [102/750], Loss: 0.6114\nEpoch [3/10], Iter [108/750], Loss: 0.6109\nEpoch [3/10], Iter [114/750], Loss: 0.6108\nEpoch [3/10], Iter [120/750], Loss: 0.6105\nEpoch [3/10], Iter [126/750], Loss: 0.6107\nEpoch [3/10], Iter [132/750], Loss: 0.6105\nEpoch [3/10], Iter [138/750], Loss: 0.6101\nEpoch [3/10], Iter [144/750], Loss: 0.6096\nEpoch [3/10], Iter [150/750], Loss: 0.6087\nEpoch [3/10], Iter [156/750], Loss: 0.6086\nEpoch [3/10], Iter [162/750], Loss: 0.6084\nEpoch [3/10], Iter [168/750], Loss: 0.6076\nEpoch [3/10], Iter [174/750], Loss: 0.6075\nEpoch [3/10], Iter [180/750], Loss: 0.6071\nEpoch [3/10], Iter [186/750], Loss: 0.6070\nEpoch [3/10], Iter [192/750], Loss: 0.6064\nEpoch [3/10], Iter [198/750], Loss: 0.6061\nEpoch [3/10], Iter [204/750], Loss: 0.6057\nEpoch [3/10], Iter [210/750], Loss: 0.6053\nEpoch [3/10], Iter [216/750], Loss: 0.6049\nEpoch [3/10], Iter [222/750], Loss: 0.6046\nEpoch [3/10], Iter [228/750], Loss: 0.6045\nEpoch [3/10], Iter [234/750], Loss: 0.6043\nEpoch [3/10], Iter [240/750], Loss: 0.6039\nEpoch [3/10], Iter [246/750], Loss: 0.6037\nEpoch [3/10], Iter [252/750], Loss: 0.6037\nEpoch [3/10], Iter [258/750], Loss: 0.6036\nEpoch [3/10], Iter [264/750], Loss: 0.6037\nEpoch [3/10], Iter [270/750], Loss: 0.6036\nEpoch [3/10], Iter [276/750], Loss: 0.6034\nEpoch [3/10], Iter [282/750], Loss: 0.6031\nEpoch [3/10], Iter [288/750], Loss: 0.6028\nEpoch [3/10], Iter [294/750], Loss: 0.6029\nEpoch [3/10], Iter [300/750], Loss: 0.6027\nEpoch [3/10], Iter [306/750], Loss: 0.6022\nEpoch [3/10], Iter [312/750], Loss: 0.6020\nEpoch [3/10], Iter [318/750], Loss: 0.6018\nEpoch [3/10], Iter [324/750], Loss: 0.6014\nEpoch [3/10], Iter [330/750], Loss: 0.6008\nEpoch [3/10], Iter [336/750], Loss: 0.6008\nEpoch [3/10], Iter [342/750], Loss: 0.6004\nEpoch [3/10], Iter [348/750], Loss: 0.6006\nEpoch [3/10], Iter [354/750], Loss: 0.6004\nEpoch [3/10], Iter [360/750], Loss: 0.6003\nEpoch [3/10], Iter [366/750], Loss: 0.6002\nEpoch [3/10], Iter [372/750], Loss: 0.5999\nEpoch [3/10], Iter [378/750], Loss: 0.6002\nEpoch [3/10], Iter [384/750], Loss: 0.6002\nEpoch [3/10], Iter [390/750], Loss: 0.5999\nEpoch [3/10], Iter [396/750], Loss: 0.5998\nEpoch [3/10], Iter [402/750], Loss: 0.5993\nEpoch [3/10], Iter [408/750], Loss: 0.5991\nEpoch [3/10], Iter [414/750], Loss: 0.5991\nEpoch [3/10], Iter [420/750], Loss: 0.5989\nEpoch [3/10], Iter [426/750], Loss: 0.5988\nEpoch [3/10], Iter [432/750], Loss: 0.5986\nEpoch [3/10], Iter [438/750], Loss: 0.5985\nEpoch [3/10], Iter [444/750], Loss: 0.5983\nEpoch [3/10], Iter [450/750], Loss: 0.5982\nEpoch [3/10], Iter [456/750], Loss: 0.5980\nEpoch [3/10], Iter [462/750], Loss: 0.5979\nEpoch [3/10], Iter [468/750], Loss: 0.5977\nEpoch [3/10], Iter [474/750], Loss: 0.5979\nEpoch [3/10], Iter [480/750], Loss: 0.5975\nEpoch [3/10], Iter [486/750], Loss: 0.5972\nEpoch [3/10], Iter [492/750], Loss: 0.5972\nEpoch [3/10], Iter [498/750], Loss: 0.5972\nEpoch [3/10], Iter [504/750], Loss: 0.5971\nEpoch [3/10], Iter [510/750], Loss: 0.5970\nEpoch [3/10], Iter [516/750], Loss: 0.5972\nEpoch [3/10], Iter [522/750], Loss: 0.5971\nEpoch [3/10], Iter [528/750], Loss: 0.5971\nEpoch [3/10], Iter [534/750], Loss: 0.5971\nEpoch [3/10], Iter [540/750], Loss: 0.5967\nEpoch [3/10], Iter [546/750], Loss: 0.5966\nEpoch [3/10], Iter [552/750], Loss: 0.5964\nEpoch [3/10], Iter [558/750], Loss: 0.5963\nEpoch [3/10], Iter [564/750], Loss: 0.5961\nEpoch [3/10], Iter [570/750], Loss: 0.5960\nEpoch [3/10], Iter [576/750], Loss: 0.5960\nEpoch [3/10], Iter [582/750], Loss: 0.5960\nEpoch [3/10], Iter [588/750], Loss: 0.5959\nEpoch [3/10], Iter [594/750], Loss: 0.5959\nEpoch [3/10], Iter [600/750], Loss: 0.5957\nEpoch [3/10], Iter [606/750], Loss: 0.5956\nEpoch [3/10], Iter [612/750], Loss: 0.5956\nEpoch [3/10], Iter [618/750], Loss: 0.5956\nEpoch [3/10], Iter [624/750], Loss: 0.5954\nEpoch [3/10], Iter [630/750], Loss: 0.5953\nEpoch [3/10], Iter [636/750], Loss: 0.5952\nEpoch [3/10], Iter [642/750], Loss: 0.5951\nEpoch [3/10], Iter [648/750], Loss: 0.5950\nEpoch [3/10], Iter [654/750], Loss: 0.5950\nEpoch [3/10], Iter [660/750], Loss: 0.5949\nEpoch [3/10], Iter [666/750], Loss: 0.5947\nEpoch [3/10], Iter [672/750], Loss: 0.5947\nEpoch [3/10], Iter [678/750], Loss: 0.5946\nEpoch [3/10], Iter [684/750], Loss: 0.5945\nEpoch [3/10], Iter [690/750], Loss: 0.5945\nEpoch [3/10], Iter [696/750], Loss: 0.5944\nEpoch [3/10], Iter [702/750], Loss: 0.5945\nEpoch [3/10], Iter [708/750], Loss: 0.5943\nEpoch [3/10], Iter [714/750], Loss: 0.5941\nEpoch [3/10], Iter [720/750], Loss: 0.5940\nEpoch [3/10], Iter [726/750], Loss: 0.5940\nEpoch [3/10], Iter [732/750], Loss: 0.5940\nEpoch [3/10], Iter [738/750], Loss: 0.5941\nEpoch [3/10], Iter [744/750], Loss: 0.5940\nEpoch [3/10], Iter [750/750], Loss: 0.5939\nEpoch [4/10], Iter [6/750], Loss: 0.5818\nEpoch [4/10], Iter [12/750], Loss: 0.5884\nEpoch [4/10], Iter [18/750], Loss: 0.5850\nEpoch [4/10], Iter [24/750], Loss: 0.5892\nEpoch [4/10], Iter [30/750], Loss: 0.5868\nEpoch [4/10], Iter [36/750], Loss: 0.5854\nEpoch [4/10], Iter [42/750], Loss: 0.5876\nEpoch [4/10], Iter [48/750], Loss: 0.5885\nEpoch [4/10], Iter [54/750], Loss: 0.5885\nEpoch [4/10], Iter [60/750], Loss: 0.5859\nEpoch [4/10], Iter [66/750], Loss: 0.5858\nEpoch [4/10], Iter [72/750], Loss: 0.5849\nEpoch [4/10], Iter [78/750], Loss: 0.5845\nEpoch [4/10], Iter [84/750], Loss: 0.5841\nEpoch [4/10], Iter [90/750], Loss: 0.5850\nEpoch [4/10], Iter [96/750], Loss: 0.5835\nEpoch [4/10], Iter [102/750], Loss: 0.5831\nEpoch [4/10], Iter [108/750], Loss: 0.5835\nEpoch [4/10], Iter [114/750], Loss: 0.5835\nEpoch [4/10], Iter [120/750], Loss: 0.5836\nEpoch [4/10], Iter [126/750], Loss: 0.5831\nEpoch [4/10], Iter [132/750], Loss: 0.5827\nEpoch [4/10], Iter [138/750], Loss: 0.5824\nEpoch [4/10], Iter [144/750], Loss: 0.5828\nEpoch [4/10], Iter [150/750], Loss: 0.5820\nEpoch [4/10], Iter [156/750], Loss: 0.5818\nEpoch [4/10], Iter [162/750], Loss: 0.5817\nEpoch [4/10], Iter [168/750], Loss: 0.5810\nEpoch [4/10], Iter [174/750], Loss: 0.5811\nEpoch [4/10], Iter [180/750], Loss: 0.5810\nEpoch [4/10], Iter [186/750], Loss: 0.5802\nEpoch [4/10], Iter [192/750], Loss: 0.5812\nEpoch [4/10], Iter [198/750], Loss: 0.5817\nEpoch [4/10], Iter [204/750], Loss: 0.5821\nEpoch [4/10], Iter [210/750], Loss: 0.5817\nEpoch [4/10], Iter [216/750], Loss: 0.5818\nEpoch [4/10], Iter [222/750], Loss: 0.5815\nEpoch [4/10], Iter [228/750], Loss: 0.5815\nEpoch [4/10], Iter [234/750], Loss: 0.5814\nEpoch [4/10], Iter [240/750], Loss: 0.5812\nEpoch [4/10], Iter [246/750], Loss: 0.5810\nEpoch [4/10], Iter [252/750], Loss: 0.5809\nEpoch [4/10], Iter [258/750], Loss: 0.5808\nEpoch [4/10], Iter [264/750], Loss: 0.5808\nEpoch [4/10], Iter [270/750], Loss: 0.5807\nEpoch [4/10], Iter [276/750], Loss: 0.5810\nEpoch [4/10], Iter [282/750], Loss: 0.5813\nEpoch [4/10], Iter [288/750], Loss: 0.5813\nEpoch [4/10], Iter [294/750], Loss: 0.5813\nEpoch [4/10], Iter [300/750], Loss: 0.5813\nEpoch [4/10], Iter [306/750], Loss: 0.5813\nEpoch [4/10], Iter [312/750], Loss: 0.5812\nEpoch [4/10], Iter [318/750], Loss: 0.5813\nEpoch [4/10], Iter [324/750], Loss: 0.5813\nEpoch [4/10], Iter [330/750], Loss: 0.5813\nEpoch [4/10], Iter [336/750], Loss: 0.5816\nEpoch [4/10], Iter [342/750], Loss: 0.5814\nEpoch [4/10], Iter [348/750], Loss: 0.5811\nEpoch [4/10], Iter [354/750], Loss: 0.5811\nEpoch [4/10], Iter [360/750], Loss: 0.5813\nEpoch [4/10], Iter [366/750], Loss: 0.5814\nEpoch [4/10], Iter [372/750], Loss: 0.5813\nEpoch [4/10], Iter [378/750], Loss: 0.5814\nEpoch [4/10], Iter [384/750], Loss: 0.5817\nEpoch [4/10], Iter [390/750], Loss: 0.5816\nEpoch [4/10], Iter [396/750], Loss: 0.5816\nEpoch [4/10], Iter [402/750], Loss: 0.5816\nEpoch [4/10], Iter [408/750], Loss: 0.5816\nEpoch [4/10], Iter [414/750], Loss: 0.5816\nEpoch [4/10], Iter [420/750], Loss: 0.5815\nEpoch [4/10], Iter [426/750], Loss: 0.5814\nEpoch [4/10], Iter [432/750], Loss: 0.5813\nEpoch [4/10], Iter [438/750], Loss: 0.5813\nEpoch [4/10], Iter [444/750], Loss: 0.5811\nEpoch [4/10], Iter [450/750], Loss: 0.5812\nEpoch [4/10], Iter [456/750], Loss: 0.5812\nEpoch [4/10], Iter [462/750], Loss: 0.5811\nEpoch [4/10], Iter [468/750], Loss: 0.5812\nEpoch [4/10], Iter [474/750], Loss: 0.5814\nEpoch [4/10], Iter [480/750], Loss: 0.5814\nEpoch [4/10], Iter [486/750], Loss: 0.5813\nEpoch [4/10], Iter [492/750], Loss: 0.5812\nEpoch [4/10], Iter [498/750], Loss: 0.5813\nEpoch [4/10], Iter [504/750], Loss: 0.5812\nEpoch [4/10], Iter [510/750], Loss: 0.5814\nEpoch [4/10], Iter [516/750], Loss: 0.5814\nEpoch [4/10], Iter [522/750], Loss: 0.5815\nEpoch [4/10], Iter [528/750], Loss: 0.5814\nEpoch [4/10], Iter [534/750], Loss: 0.5816\nEpoch [4/10], Iter [540/750], Loss: 0.5817\nEpoch [4/10], Iter [546/750], Loss: 0.5816\nEpoch [4/10], Iter [552/750], Loss: 0.5816\nEpoch [4/10], Iter [558/750], Loss: 0.5817\nEpoch [4/10], Iter [564/750], Loss: 0.5817\nEpoch [4/10], Iter [570/750], Loss: 0.5818\nEpoch [4/10], Iter [576/750], Loss: 0.5818\nEpoch [4/10], Iter [582/750], Loss: 0.5819\nEpoch [4/10], Iter [588/750], Loss: 0.5818\nEpoch [4/10], Iter [594/750], Loss: 0.5818\nEpoch [4/10], Iter [600/750], Loss: 0.5818\nEpoch [4/10], Iter [606/750], Loss: 0.5817\nEpoch [4/10], Iter [612/750], Loss: 0.5819\nEpoch [4/10], Iter [618/750], Loss: 0.5817\nEpoch [4/10], Iter [624/750], Loss: 0.5817\nEpoch [4/10], Iter [630/750], Loss: 0.5818\nEpoch [4/10], Iter [636/750], Loss: 0.5818\nEpoch [4/10], Iter [642/750], Loss: 0.5818\nEpoch [4/10], Iter [648/750], Loss: 0.5820\nEpoch [4/10], Iter [654/750], Loss: 0.5820\nEpoch [4/10], Iter [660/750], Loss: 0.5822\nEpoch [4/10], Iter [666/750], Loss: 0.5821\nEpoch [4/10], Iter [672/750], Loss: 0.5822\nEpoch [4/10], Iter [678/750], Loss: 0.5821\nEpoch [4/10], Iter [684/750], Loss: 0.5821\nEpoch [4/10], Iter [690/750], Loss: 0.5821\nEpoch [4/10], Iter [696/750], Loss: 0.5821\nEpoch [4/10], Iter [702/750], Loss: 0.5820\nEpoch [4/10], Iter [708/750], Loss: 0.5819\nEpoch [4/10], Iter [714/750], Loss: 0.5818\nEpoch [4/10], Iter [720/750], Loss: 0.5816\nEpoch [4/10], Iter [726/750], Loss: 0.5816\nEpoch [4/10], Iter [732/750], Loss: 0.5816\nEpoch [4/10], Iter [738/750], Loss: 0.5816\nEpoch [4/10], Iter [744/750], Loss: 0.5816\nEpoch [4/10], Iter [750/750], Loss: 0.5816\nEpoch [5/10], Iter [6/750], Loss: 0.5853\nEpoch [5/10], Iter [12/750], Loss: 0.5705\nEpoch [5/10], Iter [18/750], Loss: 0.5720\nEpoch [5/10], Iter [24/750], Loss: 0.5711\nEpoch [5/10], Iter [30/750], Loss: 0.5668\nEpoch [5/10], Iter [36/750], Loss: 0.5705\nEpoch [5/10], Iter [42/750], Loss: 0.5691\nEpoch [5/10], Iter [48/750], Loss: 0.5688\nEpoch [5/10], Iter [54/750], Loss: 0.5708\nEpoch [5/10], Iter [60/750], Loss: 0.5719\nEpoch [5/10], Iter [66/750], Loss: 0.5711\nEpoch [5/10], Iter [72/750], Loss: 0.5725\nEpoch [5/10], Iter [78/750], Loss: 0.5726\nEpoch [5/10], Iter [84/750], Loss: 0.5733\nEpoch [5/10], Iter [90/750], Loss: 0.5743\nEpoch [5/10], Iter [96/750], Loss: 0.5749\nEpoch [5/10], Iter [102/750], Loss: 0.5752\nEpoch [5/10], Iter [108/750], Loss: 0.5746\nEpoch [5/10], Iter [114/750], Loss: 0.5747\nEpoch [5/10], Iter [120/750], Loss: 0.5742\nEpoch [5/10], Iter [126/750], Loss: 0.5745\nEpoch [5/10], Iter [132/750], Loss: 0.5749\nEpoch [5/10], Iter [138/750], Loss: 0.5755\nEpoch [5/10], Iter [144/750], Loss: 0.5758\nEpoch [5/10], Iter [150/750], Loss: 0.5757\nEpoch [5/10], Iter [156/750], Loss: 0.5761\nEpoch [5/10], Iter [162/750], Loss: 0.5756\nEpoch [5/10], Iter [168/750], Loss: 0.5751\nEpoch [5/10], Iter [174/750], Loss: 0.5751\nEpoch [5/10], Iter [180/750], Loss: 0.5754\nEpoch [5/10], Iter [186/750], Loss: 0.5750\nEpoch [5/10], Iter [192/750], Loss: 0.5750\nEpoch [5/10], Iter [198/750], Loss: 0.5748\nEpoch [5/10], Iter [204/750], Loss: 0.5751\nEpoch [5/10], Iter [210/750], Loss: 0.5755\nEpoch [5/10], Iter [216/750], Loss: 0.5757\nEpoch [5/10], Iter [222/750], Loss: 0.5762\nEpoch [5/10], Iter [228/750], Loss: 0.5760\nEpoch [5/10], Iter [234/750], Loss: 0.5767\nEpoch [5/10], Iter [240/750], Loss: 0.5769\nEpoch [5/10], Iter [246/750], Loss: 0.5771\nEpoch [5/10], Iter [252/750], Loss: 0.5771\nEpoch [5/10], Iter [258/750], Loss: 0.5768\nEpoch [5/10], Iter [264/750], Loss: 0.5768\nEpoch [5/10], Iter [270/750], Loss: 0.5769\nEpoch [5/10], Iter [276/750], Loss: 0.5770\nEpoch [5/10], Iter [282/750], Loss: 0.5771\nEpoch [5/10], Iter [288/750], Loss: 0.5770\nEpoch [5/10], Iter [294/750], Loss: 0.5774\nEpoch [5/10], Iter [300/750], Loss: 0.5779\nEpoch [5/10], Iter [306/750], Loss: 0.5782\nEpoch [5/10], Iter [312/750], Loss: 0.5781\nEpoch [5/10], Iter [318/750], Loss: 0.5783\nEpoch [5/10], Iter [324/750], Loss: 0.5785\nEpoch [5/10], Iter [330/750], Loss: 0.5783\nEpoch [5/10], Iter [336/750], Loss: 0.5782\nEpoch [5/10], Iter [342/750], Loss: 0.5777\nEpoch [5/10], Iter [348/750], Loss: 0.5779\nEpoch [5/10], Iter [354/750], Loss: 0.5780\nEpoch [5/10], Iter [360/750], Loss: 0.5783\nEpoch [5/10], Iter [366/750], Loss: 0.5782\nEpoch [5/10], Iter [372/750], Loss: 0.5781\nEpoch [5/10], Iter [378/750], Loss: 0.5778\nEpoch [5/10], Iter [384/750], Loss: 0.5776\nEpoch [5/10], Iter [390/750], Loss: 0.5777\nEpoch [5/10], Iter [396/750], Loss: 0.5778\nEpoch [5/10], Iter [402/750], Loss: 0.5780\nEpoch [5/10], Iter [408/750], Loss: 0.5780\nEpoch [5/10], Iter [414/750], Loss: 0.5782\nEpoch [5/10], Iter [420/750], Loss: 0.5783\nEpoch [5/10], Iter [426/750], Loss: 0.5784\nEpoch [5/10], Iter [432/750], Loss: 0.5787\nEpoch [5/10], Iter [438/750], Loss: 0.5788\nEpoch [5/10], Iter [444/750], Loss: 0.5783\nEpoch [5/10], Iter [450/750], Loss: 0.5783\nEpoch [5/10], Iter [456/750], Loss: 0.5784\nEpoch [5/10], Iter [462/750], Loss: 0.5786\nEpoch [5/10], Iter [468/750], Loss: 0.5788\nEpoch [5/10], Iter [474/750], Loss: 0.5790\nEpoch [5/10], Iter [480/750], Loss: 0.5792\nEpoch [5/10], Iter [486/750], Loss: 0.5792\nEpoch [5/10], Iter [492/750], Loss: 0.5792\nEpoch [5/10], Iter [498/750], Loss: 0.5793\nEpoch [5/10], Iter [504/750], Loss: 0.5794\nEpoch [5/10], Iter [510/750], Loss: 0.5794\nEpoch [5/10], Iter [516/750], Loss: 0.5791\nEpoch [5/10], Iter [522/750], Loss: 0.5793\nEpoch [5/10], Iter [528/750], Loss: 0.5794\nEpoch [5/10], Iter [534/750], Loss: 0.5791\nEpoch [5/10], Iter [540/750], Loss: 0.5790\nEpoch [5/10], Iter [546/750], Loss: 0.5789\nEpoch [5/10], Iter [552/750], Loss: 0.5790\nEpoch [5/10], Iter [558/750], Loss: 0.5788\nEpoch [5/10], Iter [564/750], Loss: 0.5787\nEpoch [5/10], Iter [570/750], Loss: 0.5787\nEpoch [5/10], Iter [576/750], Loss: 0.5787\nEpoch [5/10], Iter [582/750], Loss: 0.5785\nEpoch [5/10], Iter [588/750], Loss: 0.5785\nEpoch [5/10], Iter [594/750], Loss: 0.5786\nEpoch [5/10], Iter [600/750], Loss: 0.5786\nEpoch [5/10], Iter [606/750], Loss: 0.5784\nEpoch [5/10], Iter [612/750], Loss: 0.5784\nEpoch [5/10], Iter [618/750], Loss: 0.5783\nEpoch [5/10], Iter [624/750], Loss: 0.5783\nEpoch [5/10], Iter [630/750], Loss: 0.5784\nEpoch [5/10], Iter [636/750], Loss: 0.5785\nEpoch [5/10], Iter [642/750], Loss: 0.5786\nEpoch [5/10], Iter [648/750], Loss: 0.5785\nEpoch [5/10], Iter [654/750], Loss: 0.5786\nEpoch [5/10], Iter [660/750], Loss: 0.5784\nEpoch [5/10], Iter [666/750], Loss: 0.5785\nEpoch [5/10], Iter [672/750], Loss: 0.5786\nEpoch [5/10], Iter [678/750], Loss: 0.5787\nEpoch [5/10], Iter [684/750], Loss: 0.5787\nEpoch [5/10], Iter [690/750], Loss: 0.5787\nEpoch [5/10], Iter [696/750], Loss: 0.5788\nEpoch [5/10], Iter [702/750], Loss: 0.5789\nEpoch [5/10], Iter [708/750], Loss: 0.5788\nEpoch [5/10], Iter [714/750], Loss: 0.5788\nEpoch [5/10], Iter [720/750], Loss: 0.5788\nEpoch [5/10], Iter [726/750], Loss: 0.5789\nEpoch [5/10], Iter [732/750], Loss: 0.5789\nEpoch [5/10], Iter [738/750], Loss: 0.5790\nEpoch [5/10], Iter [744/750], Loss: 0.5791\nEpoch [5/10], Iter [750/750], Loss: 0.5791\nEpoch [6/10], Iter [6/750], Loss: 0.5776\nEpoch [6/10], Iter [12/750], Loss: 0.5630\nEpoch [6/10], Iter [18/750], Loss: 0.5607\nEpoch [6/10], Iter [24/750], Loss: 0.5652\nEpoch [6/10], Iter [30/750], Loss: 0.5653\nEpoch [6/10], Iter [36/750], Loss: 0.5669\nEpoch [6/10], Iter [42/750], Loss: 0.5672\nEpoch [6/10], Iter [48/750], Loss: 0.5684\nEpoch [6/10], Iter [54/750], Loss: 0.5709\nEpoch [6/10], Iter [60/750], Loss: 0.5676\nEpoch [6/10], Iter [66/750], Loss: 0.5679\nEpoch [6/10], Iter [72/750], Loss: 0.5672\nEpoch [6/10], Iter [78/750], Loss: 0.5699\nEpoch [6/10], Iter [84/750], Loss: 0.5716\nEpoch [6/10], Iter [90/750], Loss: 0.5731\nEpoch [6/10], Iter [96/750], Loss: 0.5731\nEpoch [6/10], Iter [102/750], Loss: 0.5731\nEpoch [6/10], Iter [108/750], Loss: 0.5738\nEpoch [6/10], Iter [114/750], Loss: 0.5742\nEpoch [6/10], Iter [120/750], Loss: 0.5751\nEpoch [6/10], Iter [126/750], Loss: 0.5755\nEpoch [6/10], Iter [132/750], Loss: 0.5743\nEpoch [6/10], Iter [138/750], Loss: 0.5747\nEpoch [6/10], Iter [144/750], Loss: 0.5746\nEpoch [6/10], Iter [150/750], Loss: 0.5743\nEpoch [6/10], Iter [156/750], Loss: 0.5747\nEpoch [6/10], Iter [162/750], Loss: 0.5759\nEpoch [6/10], Iter [168/750], Loss: 0.5766\nEpoch [6/10], Iter [174/750], Loss: 0.5772\nEpoch [6/10], Iter [180/750], Loss: 0.5771\nEpoch [6/10], Iter [186/750], Loss: 0.5777\nEpoch [6/10], Iter [192/750], Loss: 0.5773\nEpoch [6/10], Iter [198/750], Loss: 0.5773\nEpoch [6/10], Iter [204/750], Loss: 0.5771\nEpoch [6/10], Iter [210/750], Loss: 0.5771\nEpoch [6/10], Iter [216/750], Loss: 0.5772\nEpoch [6/10], Iter [222/750], Loss: 0.5773\nEpoch [6/10], Iter [228/750], Loss: 0.5769\nEpoch [6/10], Iter [234/750], Loss: 0.5768\nEpoch [6/10], Iter [240/750], Loss: 0.5769\nEpoch [6/10], Iter [246/750], Loss: 0.5773\nEpoch [6/10], Iter [252/750], Loss: 0.5769\nEpoch [6/10], Iter [258/750], Loss: 0.5770\nEpoch [6/10], Iter [264/750], Loss: 0.5770\nEpoch [6/10], Iter [270/750], Loss: 0.5772\nEpoch [6/10], Iter [276/750], Loss: 0.5768\nEpoch [6/10], Iter [282/750], Loss: 0.5771\nEpoch [6/10], Iter [288/750], Loss: 0.5772\nEpoch [6/10], Iter [294/750], Loss: 0.5772\nEpoch [6/10], Iter [300/750], Loss: 0.5776\nEpoch [6/10], Iter [306/750], Loss: 0.5780\nEpoch [6/10], Iter [312/750], Loss: 0.5783\nEpoch [6/10], Iter [318/750], Loss: 0.5781\nEpoch [6/10], Iter [324/750], Loss: 0.5782\nEpoch [6/10], Iter [330/750], Loss: 0.5783\nEpoch [6/10], Iter [336/750], Loss: 0.5787\nEpoch [6/10], Iter [342/750], Loss: 0.5784\nEpoch [6/10], Iter [348/750], Loss: 0.5785\nEpoch [6/10], Iter [354/750], Loss: 0.5787\nEpoch [6/10], Iter [360/750], Loss: 0.5784\nEpoch [6/10], Iter [366/750], Loss: 0.5783\nEpoch [6/10], Iter [372/750], Loss: 0.5781\nEpoch [6/10], Iter [378/750], Loss: 0.5784\nEpoch [6/10], Iter [384/750], Loss: 0.5784\nEpoch [6/10], Iter [390/750], Loss: 0.5780\nEpoch [6/10], Iter [396/750], Loss: 0.5778\nEpoch [6/10], Iter [402/750], Loss: 0.5777\nEpoch [6/10], Iter [408/750], Loss: 0.5777\nEpoch [6/10], Iter [414/750], Loss: 0.5778\nEpoch [6/10], Iter [420/750], Loss: 0.5780\nEpoch [6/10], Iter [426/750], Loss: 0.5778\nEpoch [6/10], Iter [432/750], Loss: 0.5779\nEpoch [6/10], Iter [438/750], Loss: 0.5780\nEpoch [6/10], Iter [444/750], Loss: 0.5782\nEpoch [6/10], Iter [450/750], Loss: 0.5781\nEpoch [6/10], Iter [456/750], Loss: 0.5779\nEpoch [6/10], Iter [462/750], Loss: 0.5780\nEpoch [6/10], Iter [468/750], Loss: 0.5781\nEpoch [6/10], Iter [474/750], Loss: 0.5781\nEpoch [6/10], Iter [480/750], Loss: 0.5783\nEpoch [6/10], Iter [486/750], Loss: 0.5784\nEpoch [6/10], Iter [492/750], Loss: 0.5783\nEpoch [6/10], Iter [498/750], Loss: 0.5784\nEpoch [6/10], Iter [504/750], Loss: 0.5783\nEpoch [6/10], Iter [510/750], Loss: 0.5784\nEpoch [6/10], Iter [516/750], Loss: 0.5785\nEpoch [6/10], Iter [522/750], Loss: 0.5785\nEpoch [6/10], Iter [528/750], Loss: 0.5784\nEpoch [6/10], Iter [534/750], Loss: 0.5783\nEpoch [6/10], Iter [540/750], Loss: 0.5785\nEpoch [6/10], Iter [546/750], Loss: 0.5787\nEpoch [6/10], Iter [552/750], Loss: 0.5785\nEpoch [6/10], Iter [558/750], Loss: 0.5786\nEpoch [6/10], Iter [564/750], Loss: 0.5782\nEpoch [6/10], Iter [570/750], Loss: 0.5783\nEpoch [6/10], Iter [576/750], Loss: 0.5782\nEpoch [6/10], Iter [582/750], Loss: 0.5784\nEpoch [6/10], Iter [588/750], Loss: 0.5783\nEpoch [6/10], Iter [594/750], Loss: 0.5781\nEpoch [6/10], Iter [600/750], Loss: 0.5783\nEpoch [6/10], Iter [606/750], Loss: 0.5782\nEpoch [6/10], Iter [612/750], Loss: 0.5782\nEpoch [6/10], Iter [618/750], Loss: 0.5782\nEpoch [6/10], Iter [624/750], Loss: 0.5781\nEpoch [6/10], Iter [630/750], Loss: 0.5779\nEpoch [6/10], Iter [636/750], Loss: 0.5777\nEpoch [6/10], Iter [642/750], Loss: 0.5776\nEpoch [6/10], Iter [648/750], Loss: 0.5777\nEpoch [6/10], Iter [654/750], Loss: 0.5777\nEpoch [6/10], Iter [660/750], Loss: 0.5777\nEpoch [6/10], Iter [666/750], Loss: 0.5776\nEpoch [6/10], Iter [672/750], Loss: 0.5775\nEpoch [6/10], Iter [678/750], Loss: 0.5775\nEpoch [7/10], Iter [42/750], Loss: 0.5729\nEpoch [7/10], Iter [48/750], Loss: 0.5717\nEpoch [7/10], Iter [54/750], Loss: 0.5734\nEpoch [7/10], Iter [60/750], Loss: 0.5739\nEpoch [7/10], Iter [66/750], Loss: 0.5735\nEpoch [7/10], Iter [72/750], Loss: 0.5755\nEpoch [7/10], Iter [78/750], Loss: 0.5762\nEpoch [7/10], Iter [84/750], Loss: 0.5770\nEpoch [7/10], Iter [90/750], Loss: 0.5776\nEpoch [7/10], Iter [96/750], Loss: 0.5764\nEpoch [7/10], Iter [102/750], Loss: 0.5762\nEpoch [7/10], Iter [108/750], Loss: 0.5773\nEpoch [7/10], Iter [114/750], Loss: 0.5776\nEpoch [7/10], Iter [120/750], Loss: 0.5780\nEpoch [7/10], Iter [126/750], Loss: 0.5771\nEpoch [7/10], Iter [234/750], Loss: 0.5771\nEpoch [7/10], Iter [240/750], Loss: 0.5769\nEpoch [7/10], Iter [246/750], Loss: 0.5766\nEpoch [7/10], Iter [252/750], Loss: 0.5766\nEpoch [7/10], Iter [258/750], Loss: 0.5764\nEpoch [7/10], Iter [264/750], Loss: 0.5762\nEpoch [7/10], Iter [270/750], Loss: 0.5761\nEpoch [7/10], Iter [276/750], Loss: 0.5764\nEpoch [7/10], Iter [282/750], Loss: 0.5764\nEpoch [7/10], Iter [288/750], Loss: 0.5764\nEpoch [7/10], Iter [294/750], Loss: 0.5763\nEpoch [7/10], Iter [300/750], Loss: 0.5764\nEpoch [7/10], Iter [306/750], Loss: 0.5765\nEpoch [7/10], Iter [312/750], Loss: 0.5762\nEpoch [7/10], Iter [318/750], Loss: 0.5764\nEpoch [7/10], Iter [324/750], Loss: 0.5764\nEpoch [7/10], Iter [330/750], Loss: 0.5765\nEpoch [7/10], Iter [336/750], Loss: 0.5763\nEpoch [7/10], Iter [342/750], Loss: 0.5765\nEpoch [7/10], Iter [348/750], Loss: 0.5767\nEpoch [7/10], Iter [354/750], Loss: 0.5768\nEpoch [7/10], Iter [360/750], Loss: 0.5768\nEpoch [7/10], Iter [366/750], Loss: 0.5767\nEpoch [7/10], Iter [372/750], Loss: 0.5761\nEpoch [7/10], Iter [378/750], Loss: 0.5761\nEpoch [7/10], Iter [384/750], Loss: 0.5762\nEpoch [7/10], Iter [390/750], Loss: 0.5761\nEpoch [7/10], Iter [396/750], Loss: 0.5759\nEpoch [7/10], Iter [402/750], Loss: 0.5760\nEpoch [7/10], Iter [408/750], Loss: 0.5760\nEpoch [7/10], Iter [414/750], Loss: 0.5761\nEpoch [7/10], Iter [420/750], Loss: 0.5763\nEpoch [7/10], Iter [426/750], Loss: 0.5761\nEpoch [7/10], Iter [432/750], Loss: 0.5759\nEpoch [7/10], Iter [438/750], Loss: 0.5758\nEpoch [7/10], Iter [444/750], Loss: 0.5759\nEpoch [7/10], Iter [450/750], Loss: 0.5757\nEpoch [7/10], Iter [456/750], Loss: 0.5758\nEpoch [7/10], Iter [462/750], Loss: 0.5758\nEpoch [7/10], Iter [468/750], Loss: 0.5758\nEpoch [7/10], Iter [474/750], Loss: 0.5759\nEpoch [7/10], Iter [480/750], Loss: 0.5759\nEpoch [7/10], Iter [486/750], Loss: 0.5757\nEpoch [7/10], Iter [492/750], Loss: 0.5758\nEpoch [7/10], Iter [498/750], Loss: 0.5758\nEpoch [7/10], Iter [504/750], Loss: 0.5758\nEpoch [7/10], Iter [510/750], Loss: 0.5760\nEpoch [7/10], Iter [516/750], Loss: 0.5761\nEpoch [7/10], Iter [522/750], Loss: 0.5761\nEpoch [7/10], Iter [528/750], Loss: 0.5761\nEpoch [7/10], Iter [534/750], Loss: 0.5760\nEpoch [7/10], Iter [540/750], Loss: 0.5759\nEpoch [7/10], Iter [546/750], Loss: 0.5760\nEpoch [7/10], Iter [552/750], Loss: 0.5761\nEpoch [7/10], Iter [558/750], Loss: 0.5763\nEpoch [7/10], Iter [564/750], Loss: 0.5765\nEpoch [7/10], Iter [570/750], Loss: 0.5766\nEpoch [7/10], Iter [576/750], Loss: 0.5766\nEpoch [7/10], Iter [582/750], Loss: 0.5766\nEpoch [7/10], Iter [588/750], Loss: 0.5766\nEpoch [7/10], Iter [594/750], Loss: 0.5767\nEpoch [7/10], Iter [600/750], Loss: 0.5767\nEpoch [7/10], Iter [606/750], Loss: 0.5766\nEpoch [7/10], Iter [612/750], Loss: 0.5763\nEpoch [7/10], Iter [618/750], Loss: 0.5764\nEpoch [7/10], Iter [624/750], Loss: 0.5763\nEpoch [7/10], Iter [630/750], Loss: 0.5762\nEpoch [7/10], Iter [636/750], Loss: 0.5761\nEpoch [7/10], Iter [642/750], Loss: 0.5760\nEpoch [7/10], Iter [648/750], Loss: 0.5761\nEpoch [7/10], Iter [654/750], Loss: 0.5760\nEpoch [7/10], Iter [660/750], Loss: 0.5760\nEpoch [7/10], Iter [666/750], Loss: 0.5760\nEpoch [7/10], Iter [672/750], Loss: 0.5758\nEpoch [7/10], Iter [678/750], Loss: 0.5757\nEpoch [7/10], Iter [684/750], Loss: 0.5757\nEpoch [7/10], Iter [690/750], Loss: 0.5758\nEpoch [7/10], Iter [696/750], Loss: 0.5759\nEpoch [7/10], Iter [702/750], Loss: 0.5759\nEpoch [7/10], Iter [708/750], Loss: 0.5760\nEpoch [7/10], Iter [714/750], Loss: 0.5757\nEpoch [7/10], Iter [720/750], Loss: 0.5757\nEpoch [7/10], Iter [726/750], Loss: 0.5757\nEpoch [7/10], Iter [732/750], Loss: 0.5758\nEpoch [7/10], Iter [738/750], Loss: 0.5758\nEpoch [7/10], Iter [744/750], Loss: 0.5757\nEpoch [7/10], Iter [750/750], Loss: 0.5759\nEpoch [8/10], Iter [6/750], Loss: 0.5706\nEpoch [8/10], Iter [12/750], Loss: 0.5741\nEpoch [8/10], Iter [18/750], Loss: 0.5813\nEpoch [8/10], Iter [24/750], Loss: 0.5793\nEpoch [8/10], Iter [30/750], Loss: 0.5817\nEpoch [8/10], Iter [36/750], Loss: 0.5813\nEpoch [8/10], Iter [42/750], Loss: 0.5799\nEpoch [8/10], Iter [48/750], Loss: 0.5786\nEpoch [8/10], Iter [54/750], Loss: 0.5774\nEpoch [8/10], Iter [60/750], Loss: 0.5775\nEpoch [8/10], Iter [66/750], Loss: 0.5785\nEpoch [8/10], Iter [72/750], Loss: 0.5772\nEpoch [8/10], Iter [78/750], Loss: 0.5767\nEpoch [8/10], Iter [84/750], Loss: 0.5764\nEpoch [8/10], Iter [90/750], Loss: 0.5760\nEpoch [8/10], Iter [96/750], Loss: 0.5760\nEpoch [8/10], Iter [102/750], Loss: 0.5756\nEpoch [8/10], Iter [108/750], Loss: 0.5759\nEpoch [8/10], Iter [114/750], Loss: 0.5769\nEpoch [8/10], Iter [120/750], Loss: 0.5778\nEpoch [8/10], Iter [126/750], Loss: 0.5780\nEpoch [8/10], Iter [132/750], Loss: 0.5780\nEpoch [8/10], Iter [138/750], Loss: 0.5779\nEpoch [8/10], Iter [144/750], Loss: 0.5768\nEpoch [8/10], Iter [150/750], Loss: 0.5769\nEpoch [8/10], Iter [156/750], Loss: 0.5766\nEpoch [8/10], Iter [162/750], Loss: 0.5768\nEpoch [8/10], Iter [168/750], Loss: 0.5769\nEpoch [8/10], Iter [174/750], Loss: 0.5769\nEpoch [8/10], Iter [180/750], Loss: 0.5773\nEpoch [8/10], Iter [186/750], Loss: 0.5771\nEpoch [8/10], Iter [192/750], Loss: 0.5765\nEpoch [8/10], Iter [198/750], Loss: 0.5764\nEpoch [8/10], Iter [204/750], Loss: 0.5764\nEpoch [8/10], Iter [210/750], Loss: 0.5765\nEpoch [8/10], Iter [216/750], Loss: 0.5761\nEpoch [8/10], Iter [222/750], Loss: 0.5757\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"!cat /kaggle/working/Camouflage-Object-Detection/cvit-main-2/main.py","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T14:09:41.593641Z","iopub.execute_input":"2025-07-16T14:09:41.594011Z","iopub.status.idle":"2025-07-16T14:09:41.714516Z","shell.execute_reply.started":"2025-07-16T14:09:41.593989Z","shell.execute_reply":"2025-07-16T14:09:41.713585Z"}},"outputs":[{"name":"stdout","text":"import argparse\nimport os\nfrom dataset import get_loader\nfrom solver import Solver\nimport time\n\n\n\ndef main(config):\n    if config.mode == 'train':\n        train_loader = get_loader(config)\n        \n        if not os.path.exists(\"%s/demo-%s\" % (config.save_folder, time.strftime(\"%d\"))):\n            os.mkdir(\"%s/demo-%s\" % (config.save_folder, time.strftime(\"%d\")))\n        config.save_folder = \"%s/demo-%s\" % (config.save_folder, time.strftime(\"%d\"))\n        train = Solver(train_loader, None,config)\n        train.train()\n    elif config.mode == 'test':\n        #get_test_info(config)\n        test_loader = get_loader(config, mode='test')\n        if not os.path.exists(config.test_folder): os.makedirs(config.test_folder)\n        test = Solver(None, test_loader, config)\n        test.test()\n    else:\n        raise IOError(\"illegal input!!!\")\n\n\nif __name__ == '__main__':\n    resnet101_path = './pretrained/resnet101-5d3b4d8f.pth'\n    resnet50_path = './pretrained/resnet50-19c8e357.pth'\n    vgg16_path = './pretrained/vgg16-397923af.pth'\n    conformer_path='./pretrained/Conformer_base_patch16.pth'\n    densenet161_path = './pretrained/densenet161-8d451a50.pth'\n    pretrained_path = {'resnet101': resnet101_path, 'resnet50': resnet50_path, 'vgg16': vgg16_path,\n                       'densenet161': densenet161_path,'conformer':conformer_path}\n\n    parser = argparse.ArgumentParser()\n\n    # Hyper-parameters\n    parser.add_argument('--n_color', type=int, default=3)\n    parser.add_argument('--lr', type=float, default=0.00005)  # Learning rate resnet:4e-4\n    parser.add_argument('--wd', type=float, default=0.0005)  # Weight decay\n    parser.add_argument('--momentum', type=float, default=0.99)\n    parser.add_argument('--image_size', type=int, default=320)\n    parser.add_argument('--cuda', type=bool, default=True)\n    parser.add_argument('--device_id', type=str, default='cuda:0')\n\n    # Training settings\n    parser.add_argument('--arch', type=str, default='conformer'\n                        , choices=['resnet', 'vgg','densenet','conformer'])  # resnet, vgg or densenet\n    parser.add_argument('--pretrained_model', type=str, default=pretrained_path)  # pretrained backbone model\n    parser.add_argument('--epoch', type=int, default=100)\n    parser.add_argument('--batch_size', type=int, default=4)  # only support 1 now\n    parser.add_argument('--num_thread', type=int, default=0)\n    parser.add_argument('--load', type=str, default='')  # pretrained JL-DCF model\n    parser.add_argument('--save_folder', type=str, default='checkpoints/')\n    parser.add_argument('--epoch_save', type=int, default=5)\n    parser.add_argument('--iter_size', type=int, default=10)\n    parser.add_argument('--show_every', type=int, default=50)\n    parser.add_argument('--network', type=str, default='conformer'\n                        , choices=['resnet50', 'resnet101', 'vgg16', 'densenet161','conformer'])  # Network Architecture\n    #conformer setting\n    parser.add_argument('--patch_size', type=int, default=16)\n    parser.add_argument('--channel_ratio', type=int, default=4)\n    parser.add_argument('--embed_dim', type=int, default=384)\n    parser.add_argument('--depth', type=int, default=12)\n    parser.add_argument('--num_heads', type=int, default=6)\n    parser.add_argument('--mlp_ratio', type=int, default=4)\n    # Train data\n    parser.add_argument('--train_root', type=str, default='../RGBDcollection')\n    parser.add_argument('--train_list', type=str, default='../RGBDcollection/train.lst')\n    \n\n    # Testing settings\n    parser.add_argument('--model', type=str, default='checkpoints/vgg16.pth')  # Snapshot\n    parser.add_argument('--test_folder', type=str, default='test/vgg16/LFSD/')  # Test results saving folder\n    parser.add_argument('--sal_mode', type=str, default='LFSD',\n                        choices=['NJU2K', 'NLPR', 'STERE', 'RGBD135', 'LFSD', 'SIP', 'ReDWeb-S', 'COD10K'])  # Test image dataset\n    parser.add_argument('--test_root', type=str, default='../testsod')\n    parser.add_argument('--test_list', type=str, default='../testsod/test.lst')\n    # Misc\n    parser.add_argument('--mode', type=str, default='train', choices=['train', 'test'])\n    config = parser.parse_args()\n\n    if not os.path.exists(config.save_folder):\n        os.mkdir(config.save_folder)\n\n\n\n    main(config)\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"!python /kaggle/working/Camouflage-Object-Detection/cvit-main-2/main.py \\\n  --mode=test \\\n  --test_root=/kaggle/input/traindataset/COD10K-Train \\\n  --train_list=/kaggle/working/cod10k_training.lst \\\n  --arch=conformer \\\n  --network=conformer \\\n  --pretrained_model=/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth \\\n  --save_folder=/kaggle/working/checkpoints/ \\\n  --batch_size=4 \\\n  --epoch=1 \\\n  --image_size=320","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!python /kaggle/working/Camouflage-Object-Detection/cvit-main-2/main.py \\\n  --mode=test \\\n  --test_root=/kaggle/input/cod10k-test/COD10K-Test-Images \\\n  --test_list=/kaggle/working/cod10k_test.lst \\\n  --arch=conformer \\\n  --network=conformer \\\n  --model=/kaggle/working/checkpoints/demo-12/trained_model_epoch_x.pth \\\n  --test_folder=/kaggle/working/COD10K_Test_Results/ \\\n  --image_size=320\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!ls /kaggle/working/checkpoints/demo-16","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T21:03:57.612302Z","iopub.execute_input":"2025-07-16T21:03:57.612929Z","iopub.status.idle":"2025-07-16T21:03:57.730003Z","shell.execute_reply.started":"2025-07-16T21:03:57.612901Z","shell.execute_reply":"2025-07-16T21:03:57.729350Z"}},"outputs":[{"name":"stdout","text":"epoch_1.pth  epoch_3.pth  epoch_5.pth\nepoch_2.pth  epoch_4.pth  final_COD_model.pth\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"import shutil\n\n# Copy files to root directory for easy access\nshutil.copy(\"/kaggle/working/checkpoints/demo-16/epoch_1.pth\", \"/kaggle/working/epoch_1.pth\")\n\nshutil.copy(\"/kaggle/working/checkpoints/demo-16/final_COD_model.pth\", \"/kaggle/working/final_COD_model.pth\")\n\nprint(\"File Copied!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T21:00:23.407283Z","iopub.execute_input":"2025-07-16T21:00:23.407539Z","iopub.status.idle":"2025-07-16T21:00:23.925010Z","shell.execute_reply.started":"2025-07-16T21:00:23.407517Z","shell.execute_reply":"2025-07-16T21:00:23.924400Z"}},"outputs":[{"name":"stdout","text":"File Copied!\n","output_type":"stream"}],"execution_count":11},{"cell_type":"markdown","source":"# below is all previous code","metadata":{}},{"cell_type":"code","source":"# Cleaned version of CAM_test.txt to remove label column (2nd column)\nwith open('/kaggle/input/cod10k-dataset/COD10K-v3/Info/CAM_test.txt', 'r') as fin, \\\n     open('/kaggle/working/cod10k_test.lst', 'w') as fout:\n    for line in fin:\n        fout.write(line.split()[0] + '\\n')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T07:49:13.271359Z","iopub.execute_input":"2025-07-12T07:49:13.271942Z","iopub.status.idle":"2025-07-12T07:49:13.278733Z","shell.execute_reply.started":"2025-07-12T07:49:13.271918Z","shell.execute_reply":"2025-07-12T07:49:13.278156Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cat /kaggle/working/cod10k_test.lst\n","metadata":{"trusted":true,"_kg_hide-output":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%%writefile /kaggle/working/Camouflage-Object-Detection/cvit-main-2/dataset.py\nimport os\nimport cv2\nimport torch\nfrom torch.utils import data\nimport numpy as np\nimport random\n\nrandom.seed(10)\n\n\nclass ImageDataTrain(data.Dataset):\n    def __init__(self, data_root, data_list, image_size):\n        self.sal_root = data_root\n        self.sal_source = data_list\n        self.image_size = image_size\n\n        with open(self.sal_source, 'r') as f:\n            self.sal_list = [x.strip() for x in f.readlines()]\n\n        self.sal_num = len(self.sal_list)\n\n    def __getitem__(self, item):\n        # Load image and GT mask\n        im_name = self.sal_list[item % self.sal_num].split()[0]\n        gt_name = self.sal_list[item % self.sal_num].split()[2]\n\n        sal_image, im_size = load_image(os.path.join(self.sal_root, im_name), self.image_size)\n        sal_label, sal_edge = load_sal_label(os.path.join(self.sal_root, gt_name), self.image_size)\n\n        # Data augmentation (only RGB and GT)\n        sal_image, sal_label = cv_random_crop_rgb_gt(sal_image, sal_label, self.image_size)\n\n        sal_image = sal_image.transpose((2, 0, 1))\n        sal_label = sal_label.transpose((2, 0, 1))\n        sal_edge = sal_edge.transpose((2, 0, 1))\n\n        sal_image = torch.Tensor(sal_image)\n        sal_label = torch.Tensor(sal_label)\n        sal_edge = torch.Tensor(sal_edge)\n\n        sample = {'sal_image': sal_image, 'sal_label': sal_label, 'sal_edge': sal_edge}\n        return sample\n\n    def __len__(self):\n        return self.sal_num\n\n\nclass ImageDataTest(data.Dataset):\n    def __init__(self, data_root, data_list, image_size):\n        self.data_root = data_root\n        self.data_list = data_list\n        self.image_size = image_size\n\n        with open(self.data_list, 'r') as f:\n            self.image_list = [x.strip() for x in f.readlines()]\n\n        self.image_num = len(self.image_list)\n\n    def __getitem__(self, item):\n        image_path = self.image_list[item].split()[0]\n        image, im_size = load_image_test(os.path.join(self.data_root, image_path), self.image_size)\n        image = torch.Tensor(image)\n\n        return {'image': image, 'name': image_path.split('/')[-1], 'size': im_size}\n\n    def __len__(self):\n        return self.image_num\n\n\ndef get_loader(config, mode='train', pin=True):\n    shuffle = (mode == 'train')\n    if mode == 'train':\n        dataset = ImageDataTrain(config.train_root, config.train_list, config.image_size)\n    else:\n        dataset = ImageDataTest(config.test_root, config.test_list, config.image_size)\n\n    data_loader = data.DataLoader(dataset=dataset,\n                                  batch_size=config.batch_size,\n                                  shuffle=shuffle,\n                                  num_workers=config.num_thread,\n                                  pin_memory=pin)\n    return data_loader\n\n\ndef load_image(path, image_size):\n    if not os.path.exists(path):\n        print(f'File {path} not exists')\n    im = cv2.imread(path)\n    in_ = np.array(im, dtype=np.float32)\n    im_size = tuple(in_.shape[:2])\n    in_ = cv2.resize(in_, (image_size, image_size))\n    in_ = Normalization(in_)\n    return in_, im_size\n\n\ndef load_image_test(path, image_size):\n    if not os.path.exists(path):\n        print(f'File {path} not exists')\n    im = cv2.imread(path)\n    in_ = np.array(im, dtype=np.float32)\n    im_size = tuple(in_.shape[:2])\n    in_ = cv2.resize(in_, (image_size, image_size))\n    in_ = Normalization(in_)\n    in_ = in_.transpose((2, 0, 1))\n    return in_, im_size\n\n\ndef load_sal_label(path, image_size):\n    if not os.path.exists(path):\n        print(f'File {path} not exists')\n    im = cv2.imread(path, cv2.IMREAD_GRAYSCALE)\n\n    # Edge detection\n    gX = cv2.Sobel(im, ddepth=cv2.CV_32F, dx=1, dy=0, ksize=3)\n    gY = cv2.Sobel(im, ddepth=cv2.CV_32F, dx=0, dy=1, ksize=3)\n    gX = cv2.convertScaleAbs(gX)\n    gY = cv2.convertScaleAbs(gY)\n    combined = cv2.addWeighted(gX, 0.5, gY, 0.5, 0)\n    combined = np.array(combined, dtype=np.float32)\n    combined = cv2.resize(combined, (image_size, image_size))\n    combined = combined / 255.0\n    combined = combined[..., np.newaxis]\n\n    label = np.array(im, dtype=np.float32)\n    label = cv2.resize(label, (image_size, image_size))\n    label = label / 255.0\n    label = label[..., np.newaxis]\n\n    return label, combined\n\n\ndef cv_random_crop_rgb_gt(image, label, image_size):\n    crop_size = int(0.0625 * image_size)\n    cropped = image_size - crop_size\n    top = random.randint(0, crop_size)\n    left = random.randint(0, crop_size)\n\n    image = image[top: top + cropped, left: left + cropped, :]\n    label = label[top: top + cropped, left: left + cropped, :]\n\n    image = cv2.resize(image, (image_size, image_size))\n    label = cv2.resize(label, (image_size, image_size))\n    label = label[..., np.newaxis]\n\n    return image, label\n\n\ndef Normalization(image):\n    if len(image.shape) == 2:  # grayscale (2D)\n        image = np.stack([image]*3, axis=-1)  # Convert to 3-channel RGB-like\n\n    in_ = image[:, :, ::-1]  # Convert BGR to RGB\n    in_ = in_ / 255.0\n    in_ -= np.array((0.485, 0.456, 0.406))\n    in_ /= np.array((0.229, 0.224, 0.225))\n    return in_\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-16T04:48:13.636738Z","iopub.execute_input":"2025-07-16T04:48:13.637079Z","iopub.status.idle":"2025-07-16T04:48:13.644770Z","shell.execute_reply.started":"2025-07-16T04:48:13.637024Z","shell.execute_reply":"2025-07-16T04:48:13.644166Z"}},"outputs":[{"name":"stdout","text":"Overwriting /kaggle/working/Camouflage-Object-Detection/cvit-main-2/dataset.py\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"!python /kaggle/input/testdataset/cvit-main/main.py \\\n  --mode=test \\\n  --sal_mode=COD10K \\\n  --test_root=/kaggle/input/cod10k-dataset/COD10K-v3/Test \\\n  --test_list=/kaggle/input/cod10k-dataset/COD10K-v3/Info/CAM_test.txt \\\n  --pretrained_model=/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth \\\n  --model=/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth --test_folder=/kaggle/working/test_results/\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install torchsummary","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T10:49:08.468554Z","iopub.execute_input":"2025-07-11T10:49:08.468832Z","iopub.status.idle":"2025-07-11T10:49:12.325850Z","shell.execute_reply.started":"2025-07-11T10:49:08.468809Z","shell.execute_reply":"2025-07-11T10:49:12.325153Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install timm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T10:50:01.495673Z","iopub.execute_input":"2025-07-11T10:50:01.496403Z","iopub.status.idle":"2025-07-11T10:51:12.184847Z","shell.execute_reply.started":"2025-07-11T10:50:01.496362Z","shell.execute_reply":"2025-07-11T10:51:12.183976Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cd /kaggle/input/githubcode2/cvit-main","metadata":{"trusted":true,"execution":{"execution_failed":"2025-07-12T07:26:20.506Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!ls","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T11:04:53.931257Z","iopub.execute_input":"2025-07-11T11:04:53.931934Z","iopub.status.idle":"2025-07-11T11:04:54.061225Z","shell.execute_reply.started":"2025-07-11T11:04:53.931909Z","shell.execute_reply":"2025-07-11T11:04:54.060531Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!python /kaggle/input/githubcode2/cvit-main/main.py --train_root=/kaggle/input/rgbdcollection/RGBDcollection --train_list=/kaggle/input/rgbdcollection/RGBDcollection/train.lst --pretrained_model=/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T11:37:54.531179Z","iopub.execute_input":"2025-07-11T11:37:54.531486Z","iopub.status.idle":"2025-07-11T11:38:21.422799Z","shell.execute_reply.started":"2025-07-11T11:37:54.531439Z","shell.execute_reply":"2025-07-11T11:38:21.422037Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"/kaggle/input/pretrained-model/pytorch/default/1/Conformer_base_patch16.pth","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import shutil\n\n# Replace this with your actual file path from GitHub dataset\nsrc = '/kaggle/input/githubcode2/cvit-main/main.py'\ndst = '/kaggle/working/main.py'\n\nshutil.copy(src, dst)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T06:47:01.094666Z","iopub.execute_input":"2025-07-12T06:47:01.095215Z","iopub.status.idle":"2025-07-12T06:47:01.113173Z","shell.execute_reply.started":"2025-07-12T06:47:01.095184Z","shell.execute_reply":"2025-07-12T06:47:01.112438Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"file_path = '/kaggle/working/main.py'\n\nwith open(file_path, 'r') as f:\n    lines = f.readlines()\n\nwith open(file_path, 'w') as f:\n    for line in lines:\n        # Fix the sal_mode choices line\n        if \"parser.add_argument('--sal_mode'\" in line:\n            line = \"    parser.add_argument('--sal_mode', type=str, default='LFSD',\\n\" \\\n                   \"                        choices=['NJU2K', 'NLPR', 'STERE', 'RGBD135', 'LFSD', 'SIP', 'ReDWeb-S', 'COD10K'])  # Test image dataset\\n\"\n        f.write(line)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T06:47:18.282774Z","iopub.execute_input":"2025-07-12T06:47:18.283228Z","iopub.status.idle":"2025-07-12T06:47:18.288162Z","shell.execute_reply.started":"2025-07-12T06:47:18.283203Z","shell.execute_reply":"2025-07-12T06:47:18.287377Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cat /kaggle/working/main.py","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T06:57:25.428123Z","iopub.execute_input":"2025-07-12T06:57:25.428725Z","iopub.status.idle":"2025-07-12T06:57:25.547074Z","shell.execute_reply.started":"2025-07-12T06:57:25.428700Z","shell.execute_reply":"2025-07-12T06:57:25.546418Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n\nfile_path = '/kaggle/working/main.py'  # Adjust this if needed\n\nwith open(file_path, 'r') as f:\n    lines = f.readlines()\n\nnew_lines = []\nsal_mode_added = False\n\nfor line in lines:\n    # Remove all previous sal_mode lines\n    if \"parser.add_argument('--sal_mode'\" in line:\n        continue\n    # Remove orphaned 'choices=' lines that were part of sal_mode\n    elif \"choices=[\" in line:\n        continue\n    else:\n        new_lines.append(line)\n\n# Insert correct single line for sal_mode after the test_folder argument\ncorrect_line = \"parser.add_argument('--sal_mode', type=str, default='LFSD', choices=['NJU2K', 'NLPR', 'STERE', 'RGBD135', 'LFSD', 'SIP', 'ReDWeb-S', 'COD10K'])  # Test image dataset\\n\"\n\n# Re-insert at the appropriate place (after test_folder argument)\nfor idx, line in enumerate(new_lines):\n    if \"--test_folder\" in line:\n        new_lines.insert(idx + 1, correct_line)\n        break\n\n# Write the cleaned version back\nwith open(file_path, 'w') as f:\n    f.writelines(new_lines)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-12T06:57:07.239858Z","iopub.execute_input":"2025-07-12T06:57:07.240433Z","iopub.status.idle":"2025-07-12T06:57:07.247745Z","shell.execute_reply.started":"2025-07-12T06:57:07.240398Z","shell.execute_reply":"2025-07-12T06:57:07.246840Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}